{"ast":null,"code":"var _jsxFileName = \"/Users/Ginny 1/SSUI-Final/src/containers/Show.js\";\n// need to add loader logic\nimport data from '../components/data/data.json';\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Province from '../components/Province';\nimport State from '../components/State';\nimport { Card } from 'react-bootstrap';\nimport { Col } from 'react-bootstrap';\nimport { Row } from 'react-bootstrap';\nimport { selectAll } from 'd3';\n\nconst Show = props => {\n  const cache = useSelector(state => state.cache);\n  console.log(cache);\n  const provincesData = useSelector(state => state.provincesData);\n  const [caseType, setCaseType] = useState(\"\");\n  const [provinces, setProvinces] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useDispatch();\n  const url = \"https://api.covid19api.com/dayone/country/\" + props.location.slug;\n  useEffect(() => {\n    async function fetchData() {\n      if (cache[props.location.slug]) {\n        console.log(\"true - using cached data\");\n        dispatch({\n          type: 'addProvincesData',\n          payload: cache[props.location.slug]\n        });\n        const provinceArray = [];\n        cache[props.location.slug].forEach(d => {\n          if (!provinceArray.includes(d.Province) && d.Province !== \"\") {\n            provinceArray.push(d.Province);\n          } else if (!provinceArray.includes(\"\") && d.Province === \"\") provinceArray.push(\"\");\n        });\n        const sortedProvinces = provinceArray.sort((a, b) => a > b ? 1 : -1);\n        setProvinces(sortedProvinces);\n      } else if (props.location.slug === \"united-states\") {\n        dispatch({\n          type: 'cacheData',\n          payload: {\n            slug: props.location.slug,\n            data\n          }\n        }); // fetch US data from 05/01/20 onwards and add to cache\n\n        var requestOptions = {\n          method: 'GET',\n          redirect: 'follow'\n        };\n        const url = \"https://api.covid19api.com/live/country/united-states/status/confirmed/date/2020-08-12T13:13:30Z\"; // const url = \"https://api.covid19api.com/live/country/united-states/status/confirmed/date/2020-05-01T13:13:30Z\"\n\n        const response = await fetch(url, requestOptions);\n        const fetchedData = await response.json();\n        dispatch({\n          type: 'addToCachedData',\n          payload: fetchedData\n        }); // dispatch({ type: 'addProvincesData', payload: cache[\"united-states\"] })\n\n        dispatch({\n          type: 'addProvincesData',\n          payload: data.concat(fetchedData)\n        });\n        const provinceArray = [];\n        data.concat(fetchedData).forEach(d => {\n          if (!provinceArray.includes(d.Province) && d.Province !== \"\") {\n            provinceArray.push(d.Province);\n          } else if (!provinceArray.includes(\"\") && d.Province === \"\") provinceArray.push(\"\");\n        });\n        const sortedProvinces = provinceArray.sort((a, b) => a > b ? 1 : -1);\n        setProvinces(sortedProvinces);\n      } else {\n        var requestOptions = {\n          method: 'GET',\n          redirect: 'follow'\n        };\n        const response = await fetch(url, requestOptions);\n        const data = await response.json();\n        dispatch({\n          type: 'cacheData',\n          payload: {\n            slug: props.location.slug,\n            data\n          }\n        });\n        dispatch({\n          type: 'addProvincesData',\n          payload: data\n        });\n        const provinceArray = [];\n        data.forEach(d => {\n          if (!provinceArray.includes(d.Province) && d.Province !== \"\") {\n            provinceArray.push(d.Province);\n          } else if (!provinceArray.includes(\"\") && d.Province === \"\") provinceArray.push(\"\");\n        });\n        setProvinces(provinceArray.sort((a, b) => a > b ? 1 : -1));\n      }\n    }\n\n    fetchData();\n  }, []); // Logic if country is United States (because state data is broken down into cities)\n\n  if (provinces.includes(\"Alabama\")) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: \"12\",\n      sm: \"6\",\n      md: \"4\",\n      lg: \"3\",\n      xl: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: event => (setCaseType(event.target.value), selectAll(\"svg\").remove()),\n      className: \"cases block\",\n      value: \"total\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 37\n      }\n    }, \"Total Cases\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: event => (setCaseType(event.target.value), selectAll(\"svg\").remove()),\n      className: \"deathsPerOneMillion block\",\n      value: \"deaths\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 37\n      }\n    }, \"Deaths\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: event => (setCaseType(event.target.value), selectAll(\"svg\").remove()),\n      className: \"activee block\",\n      value: \"active\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 37\n      }\n    }, \" Active Cases\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: event => (setCaseType(event.target.value), selectAll(\"svg\").remove()),\n      className: \"recovered block\",\n      value: \"recovered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 37\n      }\n    }, \"Recovered Cases\"))), provinces.map((state, index) => {\n      return /*#__PURE__*/React.createElement(Col, {\n        xs: 12,\n        sm: 6,\n        md: 4,\n        lg: 3,\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(State, {\n        caseType: caseType,\n        state: state,\n        stateData: provincesData.filter(day => day.Province === state),\n        countryName: provincesData[0].Country,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 49\n        }\n      })));\n    }))); // Logic for countries that are not broken down into provinces (such as Mexico)\n  } else if (provinces.length === 1) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: \"12\",\n      sm: \"6\",\n      md: \"4\",\n      lg: \"3\",\n      xl: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: event => (setCaseType(event.target.value), selectAll(\"svg\").remove()),\n      className: \"cases block\",\n      value: \"total\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 37\n      }\n    }, \"Total Cases\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: event => (setCaseType(event.target.value), selectAll(\"svg\").remove()),\n      className: \"deathsPerOneMillion block\",\n      value: \"deaths\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 37\n      }\n    }, \"Deaths\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: event => (setCaseType(event.target.value), selectAll(\"svg\").remove()),\n      className: \"activee block\",\n      value: \"active\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 37\n      }\n    }, \" Active Cases\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: event => (setCaseType(event.target.value), selectAll(\"svg\").remove()),\n      className: \"recovered block\",\n      value: \"recovered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 37\n      }\n    }, \"Recovered Cases\"))), /*#__PURE__*/React.createElement(Col, {\n      sm: \"12\",\n      md: \"9\",\n      lg: \"9\",\n      xl: \"9\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Province, {\n      caseType: caseType,\n      province: provincesData[0].Country,\n      provinceData: provincesData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 37\n      }\n    }))))); // Logic for all other countries that have data broken down by province (such as China, or United Kingdom)\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: \"12\",\n      sm: \"6\",\n      md: \"4\",\n      lg: \"3\",\n      xl: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: event => (setCaseType(event.target.value), selectAll(\"svg\").remove()),\n      className: \"cases block\",\n      value: \"total\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 37\n      }\n    }, \"Total Cases\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: event => (setCaseType(event.target.value), selectAll(\"svg\").remove()),\n      className: \"deathsPerOneMillion block\",\n      value: \"deaths\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 37\n      }\n    }, \"Deaths\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: event => (setCaseType(event.target.value), selectAll(\"svg\").remove()),\n      className: \"activee block\",\n      value: \"active\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 37\n      }\n    }, \" Active Cases\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: event => (setCaseType(event.target.value), selectAll(\"svg\").remove()),\n      className: \"recovered block\",\n      value: \"recovered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 37\n      }\n    }, \"Recovered Cases\"))), provinces.map((province, index) => {\n      return /*#__PURE__*/React.createElement(Col, {\n        xs: 12,\n        sm: 6,\n        md: 4,\n        lg: 3,\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(Province, {\n        caseType: caseType,\n        province: province,\n        provinceData: provincesData.filter(day => day.Province === province),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 49\n        }\n      })));\n    })));\n  }\n};\n\nexport default Show;","map":{"version":3,"sources":["/Users/Ginny 1/SSUI-Final/src/containers/Show.js"],"names":["data","React","useState","useEffect","useSelector","useDispatch","Province","State","Card","Col","Row","selectAll","Show","props","cache","state","console","log","provincesData","caseType","setCaseType","provinces","setProvinces","isLoading","setIsLoading","dispatch","url","location","slug","fetchData","type","payload","provinceArray","forEach","d","includes","push","sortedProvinces","sort","a","b","requestOptions","method","redirect","response","fetch","fetchedData","json","concat","event","target","value","remove","map","index","filter","day","Country","length","province"],"mappings":"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","sourcesContent":["// need to add loader logic\nimport data from '../components/data/data.json'\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Province from '../components/Province'\nimport State from '../components/State'\n\nimport { Card } from 'react-bootstrap'\nimport { Col } from 'react-bootstrap'\nimport { Row } from 'react-bootstrap'\n\nimport { selectAll } from 'd3'\n\n\n\nconst Show = (props) => {\n    const cache = useSelector(state => state.cache)\n    console.log(cache)\n    const provincesData = useSelector(state => state.provincesData)\n    const [caseType, setCaseType] = useState(\"\");\n    const [provinces, setProvinces] = useState([])\n    const [isLoading, setIsLoading] = useState(false);\n    const dispatch = useDispatch()\n    const url = \"https://api.covid19api.com/dayone/country/\" + props.location.slug\n\n\n    useEffect( () => {\n        async function fetchData() {\n\n            if (cache[props.location.slug]) {\n                console.log(\"true - using cached data\")\n                dispatch({ type: 'addProvincesData', payload: cache[props.location.slug] })\n\n                const provinceArray = []\n                cache[props.location.slug].forEach(d => {\n                    if (!provinceArray.includes(d.Province) && d.Province !== \"\") {\n                        provinceArray.push(d.Province)\n                    } else if (!provinceArray.includes(\"\") && d.Province === \"\")\n                        provinceArray.push(\"\")\n                })\n                const sortedProvinces = provinceArray.sort((a,b) => a > b ? 1 : -1)\n                setProvinces(sortedProvinces)\n\n\n\n            } else if (props.location.slug === \"united-states\") {\n                dispatch({ type: 'cacheData', payload: {slug: props.location.slug, data} })\n\n                // fetch US data from 05/01/20 onwards and add to cache\n                var requestOptions = {\n                    method: 'GET',\n                    redirect: 'follow'\n                };\n\n                const url = \"https://api.covid19api.com/live/country/united-states/status/confirmed/date/2020-08-12T13:13:30Z\"\n                // const url = \"https://api.covid19api.com/live/country/united-states/status/confirmed/date/2020-05-01T13:13:30Z\"\n                const response = await fetch(url, requestOptions)\n                const fetchedData = await response.json()\n                dispatch({ type: 'addToCachedData', payload: fetchedData })\n                // dispatch({ type: 'addProvincesData', payload: cache[\"united-states\"] })\n                dispatch({ type: 'addProvincesData', payload: data.concat(fetchedData) })\n\n\n\n                const provinceArray = []\n                data.concat(fetchedData).forEach(d => {\n                    if (!provinceArray.includes(d.Province) && d.Province !== \"\") {\n                        provinceArray.push(d.Province)\n                    } else if (!provinceArray.includes(\"\") && d.Province === \"\")\n                        provinceArray.push(\"\")\n                })\n                const sortedProvinces = provinceArray.sort((a,b) => a > b ? 1 : -1)\n                setProvinces(sortedProvinces)\n\n\n\n\n            } else {\n\n                var requestOptions = {\n                    method: 'GET',\n                    redirect: 'follow'\n                };\n\n                const response = await fetch(url, requestOptions)\n                const data = await response.json()\n                dispatch({ type: 'cacheData', payload: {slug: props.location.slug, data} })\n                dispatch({ type: 'addProvincesData', payload: data})\n\n                const provinceArray = []\n                data.forEach(d => {\n                    if (!provinceArray.includes(d.Province) && d.Province !== \"\") {\n                        provinceArray.push(d.Province)\n                    } else if (!provinceArray.includes(\"\") && d.Province === \"\")\n                        provinceArray.push(\"\")\n                })\n                \n                setProvinces(provinceArray.sort((a,b) => a > b ? 1 : -1))\n            }\n        }\n        fetchData();\n    }, []); \n\n            // Logic if country is United States (because state data is broken down into cities)\n        if (provinces.includes(\"Alabama\")) {\n                return (\n                    <div>\n                        <Row >\n                            <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n                                <Card>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n                                </Card>\n                            </Col>\n\n                            {provinces.map((state, index) => { \n\n                                    return (\n                                        <Col xs={12} sm={6} md={4} lg={3} key={index}>\n                                            <Card>\n                                                <State caseType={caseType} state={state} stateData={provincesData.filter(day => day.Province === state)} countryName={provincesData[0].Country}/>\n                                            </Card>\n                                        </Col>\n                                    )\n                                })\n                            } \n                        </Row>\n                    </div>\n                )\n\n            // Logic for countries that are not broken down into provinces (such as Mexico)\n            } else if (provinces.length === 1) {\n                return (\n                    <div>\n                        <Row >\n                            <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n                                <Card>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n                                </Card>\n                            </Col>\n\n                            <Col sm=\"12\" md=\"9\" lg=\"9\" xl=\"9\">\n                                <Card>\n                                    <Province caseType={caseType} province={provincesData[0].Country} provinceData={provincesData}/> \n                                </Card>\n                            </Col>\n                        </Row>\n                    </div>\n                )\n\n            // Logic for all other countries that have data broken down by province (such as China, or United Kingdom)\n            } else {\n                return (\n                    <div>\n                        <Row >\n                            <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n                                <Card>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n                                    <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n                                </Card>\n                            </Col>\n\n                            {provinces.map((province, index) => { \n                                    return (\n                                        <Col xs={12} sm={6} md={4} lg={3} key={index}>\n                                            <Card>\n                                                <Province caseType={caseType} province={province} provinceData={provincesData.filter(day => day.Province === province)}/> \n                                            </Card>\n                                        </Col>\n                                    )\n                                })\n                            } \n                        </Row>\n                    </div>\n                )\n            }\n\n}\n\nexport default Show"]},"metadata":{},"sourceType":"module"}