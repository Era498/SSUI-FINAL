{"ast":null,"code":"var _jsxFileName = \"/Users/Ginny 1/SSUI-Final/src/containers/Simulation.js\";\nimport './simStyle.css';\nimport { Graph } from \"react-d3-graph\";\nimport React, { Component } from \"react\";\nimport config from \"./config.js\"; // import singles from \"./data.js\"\n\nimport airport from \"./airport.js\"; //import slowburn form \"./slowburn.js\"\n\nimport linedata from \"./linedata.js\";\nimport { LineChart } from 'react-d3-components';\nvar dat = airport;\nvar dblNode = null;\nvar susCol = \"DarkKhaki\";\nvar prevCol = susCol;\nvar saveState = JSON.parse(JSON.stringify(dat));\n\nclass Simulation extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: dat,\n      recChance: 0.9,\n      inChance: 0.6,\n      intervalId: null,\n      LightCoralNodes: 0,\n      MediumAquaMarineNodes: 0,\n      susNodes: 100,\n      simSpeed: 1000,\n      linedata: linedata,\n      xVal: 0,\n      myConfig: config\n    };\n    this.changeInChance = this.changeInChance.bind(this);\n    this.changeRecChance = this.changeRecChance.bind(this);\n    this.changeSimSpeed = this.changeSimSpeed.bind(this);\n  }\n\n  changeInChance(e) {\n    this.setState({\n      inChance: e.target.value / 100\n    });\n  }\n\n  changeRecChance(e) {\n    this.setState({\n      recChance: e.target.value / 100\n    });\n  }\n\n  changeSimSpeed(e) {\n    if (e.target.value > 0) {\n      this.setState({\n        simSpeed: e.target.value\n      });\n    } else {\n      this.setState({\n        simSpeed: 1\n      });\n    }\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      let modConfig = { ...this.state.myConfig\n      };\n      modConfig[\"staticGraphWithDragAndDrop\"] = true;\n      this.setState({\n        myConfig: modConfig\n      });\n    }, 9000);\n  }\n\n  render() {\n    const ref = this; // graph event callbacks\n\n    const onClickGraph = function () {\n      let modData = { ...ref.state.data\n      };\n      let selectNode = modData.nodes.filter(item => {\n        return item.id === dblNode;\n      });\n      selectNode.forEach(item => {\n        item.color = prevCol;\n      });\n      ref.setState({\n        data: modData\n      });\n      dblNode = null;\n    };\n\n    const deleteNode = function () {\n      if (ref.state.data.nodes && ref.state.data.nodes.length > 1) {\n        const id = dblNode;\n        const nodes = ref.state.data.nodes.filter(item => {\n          return item.id !== id;\n        });\n        const links = ref.state.data.links.filter(l => l.source !== id && l.target !== id);\n        console.log(links);\n        const data = {\n          nodes,\n          links\n        };\n        ref.setState({\n          data\n        });\n      }\n\n      ref.setState({\n        susNodes: ref.state.data.nodes.length - ref.state.LightCoralNodes - ref.state.MediumAquaMarineNodes - 1\n      });\n      dblNode = null;\n    };\n\n    const onClickNode = function (nodeId) {\n      let modData = { ...ref.state.data\n      };\n\n      if (dblNode !== null) {\n        let dat = ref.state.data;\n\n        if (nodeId !== dblNode) {\n          dat.links.push({\n            source: dblNode,\n            target: nodeId\n          });\n        }\n\n        let modData = { ...ref.state.data\n        };\n        let selectNode = modData.nodes.filter(item => {\n          return item.id === dblNode;\n        });\n        selectNode.forEach(item => {\n          item.color = prevCol;\n        });\n        ref.setState({\n          data: modData\n        });\n        dblNode = null;\n        ref.setState({\n          data: dat\n        });\n      } else {\n        let selectNode = modData.nodes.filter(item => {\n          return item.id === nodeId;\n        });\n        selectNode.forEach(item => {\n          if (item.color === \"LightCoral\") {\n            item.color = \"MediumAquaMarine\";\n            ref.setState({\n              LightCoralNodes: ref.state.LightCoralNodes - 1\n            });\n            ref.setState({\n              MediumAquaMarineNodes: ref.state.MediumAquaMarineNodes + 1\n            });\n          } else if (item.color === \"MediumAquaMarine\") {\n            item.color = susCol;\n            ref.setState({\n              MediumAquaMarineNodes: ref.state.MediumAquaMarineNodes - 1\n            });\n            ref.setState({\n              susNodes: ref.state.susNodes + 1\n            });\n          } else {\n            item.color = \"LightCoral\";\n            ref.setState({\n              susNodes: ref.state.susNodes - 1\n            });\n            ref.setState({\n              LightCoralNodes: ref.state.LightCoralNodes + 1\n            });\n          }\n        });\n        ref.setState({\n          data: modData\n        });\n      }\n    };\n\n    const onDoubleClickNode = function (nodeId) {\n      if (dblNode == null) {\n        dblNode = nodeId;\n        let modData = { ...ref.state.data\n        };\n        let selectNode = modData.nodes.filter(item => {\n          return item.id === nodeId;\n        });\n        selectNode.forEach(item => {\n          prevCol = item.color;\n          item.color = \"purple\";\n        });\n        ref.setState({\n          data: modData\n        });\n      } else {\n        let dat = ref.state.data;\n        dat.links.push({\n          source: dblNode,\n          target: nodeId\n        });\n        let modData = { ...ref.state.data\n        };\n        let selectNode = modData.nodes.filter(item => {\n          return item.id === dblNode;\n        });\n        selectNode.forEach(item => {\n          item.color = prevCol;\n        });\n        ref.setState({\n          data: modData\n        });\n        dblNode = null;\n        ref.setState({\n          data: dat\n        });\n      }\n    };\n\n    const onRightClickNode = function (event, nodeId) {\n      event.preventDefault();\n      let array = { ...ref.state.data\n      };\n      let el = array.links.filter(item => {\n        return item.source !== nodeId && item.target !== nodeId;\n      });\n      array.links = el;\n      ref.setState({\n        data: array\n      });\n    };\n\n    const onMouseOverNode = function (nodeId) {\n      if (dblNode !== null) {\n        let dat = ref.state.data;\n        dat.links.push({\n          source: dblNode,\n          target: nodeId\n        });\n        let modData = { ...ref.state.data\n        };\n        ref.setState({\n          data: dat\n        });\n      }\n    };\n\n    const onMouseOutNode = function (nodeId) {//console.log(`Mouse out node ${nodeId}`);\n    };\n\n    const onClickLink = function (source, target) {\n      let array = { ...ref.state.data\n      };\n      let el = array.links.filter(item => {\n        return item.source !== source || item.target !== target;\n      });\n      array.links = el;\n      ref.setState({\n        data: array\n      });\n    };\n\n    const onRightClickLink = function (event, source, target) {};\n\n    const onMouseOverLink = function (source, target) {//console.log(`Mouse over in link between ${source} and ${target}`);\n    };\n\n    const onMouseOutLink = function (source, target) {//console.log(`Mouse out link between ${source} and ${target}`);\n    };\n\n    const onNodePositionChange = function (nodeId, x, y) {//console.log(`Node ${nodeId} is moved to new position. New position is x= ${x} y= ${y}`);\n    };\n\n    const onClickAddNode = function () {\n      let modConfig = { ...ref.state.myConfig\n      };\n      modConfig[\"staticGraphWithDragAndDrop\"] = false;\n      ref.setState({\n        myConfig: modConfig\n      });\n\n      if (ref.state.data.nodes && ref.state.data.nodes.length) {\n        const maxIndex = ref.state.data.nodes.length - 1;\n        const minIndex = 0;\n        let i = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex),\n            nLinks = Math.floor(Math.random() * (5 - minIndex + 1) + minIndex);\n        const newNode = `${ref.state.data.nodes.length}`;\n        ref.state.data.nodes.push({\n          id: newNode\n        });\n\n        while (ref.state.data.nodes[i] && ref.state.data.nodes[i].id && nLinks) {\n          ref.state.data.links.push({\n            source: newNode,\n            target: ref.state.data.nodes[i].id\n          });\n          i++;\n          nLinks--;\n        }\n\n        ref.setState({\n          data: ref.state.data\n        });\n      } else {\n        // 1st node\n        const data = {\n          nodes: [{\n            id: \"Node 1\"\n          }],\n          links: []\n        };\n        ref.setState({\n          data\n        });\n      }\n\n      ref.setState({\n        susNodes: ref.state.data.nodes.length - ref.state.LightCoralNodes - ref.state.MediumAquaMarineNodes\n      });\n      setTimeout(() => {\n        let modConfig = { ...ref.state.myConfig\n        };\n        modConfig[\"staticGraphWithDragAndDrop\"] = true;\n        ref.setState({\n          myConfig: modConfig\n        });\n      }, 9000);\n    }; // const useSingles = function() {\n    //   ref.setState({ data: singles });\n    //   ref.setState({ saveState: singles });\n    //   ref.setState({ LightCoralNodes: 1 });\n    //   ref.setState({ MediumAquaMarineNodes: 0 });\n    //   ref.setState({ susNodes: 100 });\n    // }\n\n\n    const simStep = function () {\n      if (ref.state.LightCoralNodes !== 0) {\n        let selectNode = ref.state.data.nodes.filter(item => {\n          return item.color === \"LightCoral\";\n        });\n        let nodeIds = [];\n        selectNode.forEach(item => {\n          nodeIds.push(item.id);\n        });\n        let vulnerable = [];\n        let vulnlinks = {};\n        ref.state.data.links.forEach(item => {\n          if (nodeIds.indexOf(item.source) > -1) {\n            vulnerable.push(item.target);\n            vulnlinks[item.target] = item;\n          }\n\n          if (nodeIds.indexOf(item.target) > -1) {\n            vulnerable.push(item.source);\n            vulnlinks[item.source] = item;\n          }\n        });\n        let modData = { ...ref.state.data\n        };\n        let nodePicks = modData.nodes.filter(item => {\n          return vulnerable.indexOf(item.id) > -1 && item.color !== \"LightCoral\";\n        });\n        let recPicks = modData.nodes.filter(item => {\n          return item.color === \"LightCoral\";\n        });\n        nodePicks.forEach(item => {\n          if (Math.random() > 1 - ref.state.inChance && item.color !== \"MediumAquaMarine\") {\n            item.color = \"LightCoral\";\n            vulnlinks[item.id].color = \"LightCoral\";\n          }\n        });\n        recPicks.forEach(item => {\n          if (Math.random() > 1 - ref.state.recChance && item.color === \"LightCoral\") {\n            item.color = \"MediumAquaMarine\";\n          }\n        });\n        ref.setState({\n          data: modData\n        });\n        let rNum = 0;\n        let gNum = 0;\n        let susNum = 0;\n        ref.state.data.nodes.forEach(item => {\n          if (item.color === \"LightCoral\") {\n            rNum = rNum + 1;\n          } else if (item.color === \"MediumAquaMarine\") {\n            gNum = gNum + 1;\n          } else {\n            susNum = susNum + 1;\n          }\n        });\n        ref.setState({\n          LightCoralNodes: rNum\n        });\n        ref.setState({\n          MediumAquaMarineNodes: gNum\n        });\n        ref.setState({\n          susNodes: susNum\n        });\n        ref.setState({\n          xVal: ref.state.xVal + 1\n        });\n        let newlines = ref.state.linedata;\n        newlines[0].values.push({\n          x: ref.state.xVal + 1,\n          y: susNum\n        });\n        newlines[1].values.push({\n          x: ref.state.xVal + 1,\n          y: rNum\n        });\n        newlines[2].values.push({\n          x: ref.state.xVal + 1,\n          y: gNum\n        });\n        ref.setState({\n          linedata: newlines\n        });\n      }\n    };\n\n    const onClickRemoveNode = function () {\n      if (ref.state.data.nodes && ref.state.data.nodes.length > 1) {\n        const id = ref.state.data.nodes[0].id;\n        ref.state.data.nodes.splice(0, 1);\n        const links = ref.state.data.links.filter(l => l.source !== id && l.target !== id);\n        const data = {\n          nodes: ref.state.data.nodes,\n          links\n        };\n        ref.setState({\n          data\n        });\n      }\n\n      ref.setState({\n        susNodes: ref.state.data.nodes.length - ref.state.LightCoralNodes - ref.state.MediumAquaMarineNodes - 1\n      });\n    };\n\n    const restartSimulation = function () {\n      pause();\n      let modData = { ...ref.state.data\n      };\n      modData.nodes.forEach(item => {\n        item.color = susCol;\n      });\n      modData.links.forEach(item => {\n        item.color = \"#d3d3d3\";\n      });\n      ref.setState({\n        data: modData\n      });\n      ref.setState({\n        xVal: 0\n      });\n      ref.setState({\n        linedata: [{\n          label: 'Susceptible',\n          values: [{\n            x: 0.1,\n            y: 100\n          }]\n        }, {\n          label: 'Infected',\n          values: [{\n            x: 0,\n            y: 0\n          }]\n        }, {\n          label: 'Recovered',\n          values: [{\n            x: 0,\n            y: 0\n          }]\n        }]\n      });\n      let rNum = 0;\n      let gNum = 0;\n      let susNum = 0;\n      ref.state.data.nodes.forEach(item => {\n        if (item.color === \"LightCoral\") {\n          rNum = rNum + 1;\n        } else if (item.color === \"MediumAquaMarine\") {\n          gNum = gNum + 1;\n        } else {\n          susNum = susNum + 1;\n        }\n      });\n      ref.setState({\n        LightCoralNodes: rNum\n      });\n      ref.setState({\n        MediumAquaMarineNodes: gNum\n      });\n      ref.setState({\n        susNodes: susNum\n      });\n    };\n\n    const play = () => {\n      let intervalId = setInterval(simStep, ref.state.simSpeed);\n      this.setState({\n        intervalId: intervalId\n      });\n    };\n\n    const pause = () => {\n      clearInterval(this.state.intervalId);\n    };\n\n    const oneStep = () => {\n      saveState = JSON.parse(JSON.stringify(airport));\n      simStep();\n    };\n\n    const tooltipLine = function (label, data) {\n      return label;\n    };\n\n    const colorLine = function (label, data) {\n      if (label === 'Susceptible') {\n        return \"DarkKhaki\";\n      }\n\n      if (label === 'Infected') {\n        return \"LightCoral\";\n      }\n\n      return \"MediumAquaMarine\";\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"one\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ones\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"circleButton\",\n      onClick: onClickAddNode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 11\n      }\n    }, \"+\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"circleButton\",\n      onClick: onClickRemoveNode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 13\n      }\n    }, \"-\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"homeButton\",\n      onClick: deleteNode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 11\n      }\n    }, \"Delete Selected Node\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"homeButton\",\n      onClick: oneStep,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 11\n      }\n    }, \"Step Forward\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"homeButton\",\n      onClick: restartSimulation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 11\n      }\n    }, \"Reset\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 11\n      }\n    }), \"Infection Chance: \", /*#__PURE__*/React.createElement(\"input\", {\n      name: \"inChance\",\n      type: \"range\",\n      min: \"1\",\n      max: \"100\",\n      value: this.state.inChance * 100,\n      onChange: this.changeInChance,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 29\n      }\n    }), parseInt(this.state.inChance * 100), \"%\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 11\n      }\n    }), \"Recovery Chance: \", /*#__PURE__*/React.createElement(\"input\", {\n      name: \"recChance\",\n      type: \"range\",\n      min: \"1\",\n      max: \"100\",\n      value: this.state.recChance * 100,\n      onChange: this.changeRecChance,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 28\n      }\n    }), parseInt(this.state.recChance * 100), \"%\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"homeButton\",\n      onClick: play,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 11\n      }\n    }, \"Play\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"homeButton\",\n      onClick: pause,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 11\n      }\n    }, \"Pause\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 11\n      }\n    }), \"Speed of Simulation:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 11\n      }\n    }), \"fast\", /*#__PURE__*/React.createElement(\"input\", {\n      name: \"simSpeed\",\n      type: \"range\",\n      min: \"1\",\n      max: \"1000\",\n      value: this.state.simSpeed,\n      onChange: this.changeSimSpeed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 15\n      }\n    }), \"slow\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"circle3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 16\n      }\n    }), \"Susceptible: \", this.state.susNodes), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"circle1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 16\n      }\n    }), \" Infected: \", this.state.LightCoralNodes), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"circle2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 16\n      }\n    }), \"Recovered: \", this.state.MediumAquaMarineNodes)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-9 two\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Graph, {\n      id: \"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n      ,\n      data: this.state.data,\n      config: this.state.myConfig,\n      onClickNode: onClickNode,\n      onDoubleClickNode: onDoubleClickNode,\n      onRightClickNode: onRightClickNode,\n      onClickGraph: onClickGraph,\n      onClickLink: onClickLink,\n      onRightClickLink: onRightClickLink,\n      onMouseOverNode: onMouseOverNode,\n      onMouseOutNode: onMouseOutNode,\n      onMouseOverLink: onMouseOverLink,\n      onMouseOutLink: onMouseOutLink,\n      onNodePositionChange: onNodePositionChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row graph\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(LineChart, {\n      data: this.state.linedata,\n      width: window.innerWidth / 1.1,\n      colorScale: colorLine,\n      tooltipHtml: tooltipLine,\n      height: 400,\n      strokeDasharray: \"3 3\",\n      margin: {\n        top: 10,\n        bottom: 50,\n        left: 50,\n        right: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default Simulation;","map":{"version":3,"sources":["/Users/Ginny 1/SSUI-Final/src/containers/Simulation.js"],"names":["Graph","React","Component","config","airport","linedata","LineChart","dat","dblNode","susCol","prevCol","saveState","JSON","parse","stringify","Simulation","constructor","state","data","recChance","inChance","intervalId","LightCoralNodes","MediumAquaMarineNodes","susNodes","simSpeed","xVal","myConfig","changeInChance","bind","changeRecChance","changeSimSpeed","e","setState","target","value","componentDidMount","setTimeout","modConfig","render","ref","onClickGraph","modData","selectNode","nodes","filter","item","id","forEach","color","deleteNode","length","links","l","source","console","log","onClickNode","nodeId","push","onDoubleClickNode","onRightClickNode","event","preventDefault","array","el","onMouseOverNode","onMouseOutNode","onClickLink","onRightClickLink","onMouseOverLink","onMouseOutLink","onNodePositionChange","x","y","onClickAddNode","maxIndex","minIndex","i","Math","floor","random","nLinks","newNode","simStep","nodeIds","vulnerable","vulnlinks","indexOf","nodePicks","recPicks","rNum","gNum","susNum","newlines","values","onClickRemoveNode","splice","restartSimulation","pause","label","play","setInterval","clearInterval","oneStep","tooltipLine","colorLine","parseInt","window","innerWidth","top","bottom","left","right"],"mappings":"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","sourcesContent":["\r\nimport './simStyle.css';\r\nimport { Graph } from \"react-d3-graph\";\r\nimport React, { Component } from \"react\";\r\nimport config from \"./config.js\"\r\n// import singles from \"./data.js\"\r\nimport airport from \"./airport.js\"\r\n//import slowburn form \"./slowburn.js\"\r\nimport linedata from \"./linedata.js\"\r\nimport {LineChart} from 'react-d3-components';\r\n\r\nvar dat = airport\r\nvar dblNode = null;\r\nvar susCol = \"DarkKhaki\";\r\nvar prevCol =  susCol;\r\nvar saveState= JSON.parse(JSON.stringify(dat))\r\nclass Simulation extends Component {\r\n  constructor() {\r\n    super();\r\n    \r\n    this.state = {\r\n      data: dat,\r\n      recChance: 0.9,\r\n      inChance: 0.6,\r\n      intervalId: null,\r\n      LightCoralNodes: 0,\r\n      MediumAquaMarineNodes: 0,\r\n      susNodes: 100,\r\n      simSpeed: 1000,\r\n      linedata: linedata,\r\n      xVal: 0,\r\n      myConfig: config,\r\n      \r\n    };\r\n    this.changeInChance = this.changeInChance.bind(this)\r\n    this.changeRecChance = this.changeRecChance.bind(this)\r\n    this.changeSimSpeed = this.changeSimSpeed.bind(this)\r\n  }\r\n  changeInChance(e) {\r\n        this.setState({inChance: e.target.value/100})\r\n    \r\n  }\r\n  changeRecChance(e) {\r\n      this.setState({recChance: e.target.value/100})\r\n  }\r\n  changeSimSpeed(e) {\r\n    if( e.target.value > 0){\r\n      this.setState({simSpeed: e.target.value})\r\n    }\r\n    else {\r\n      this.setState({simSpeed: 1})\r\n    }\r\n  }\r\n  \r\n  componentDidMount() {\r\n    setTimeout(() => {  \r\n      let modConfig = {...this.state.myConfig}\r\n    modConfig[\"staticGraphWithDragAndDrop\"]=true;\r\n    this.setState({myConfig: modConfig})\r\n  }, 9000);\r\n  }\r\n  render() {\r\n     const ref = this;\r\n          // graph event callbacks\r\n      const onClickGraph = function() {\r\n        let modData = { ...ref.state.data };\r\n        let selectNode = modData.nodes.filter(item => {\r\n          return item.id === dblNode;\r\n        });\r\n        selectNode.forEach(item => {\r\n            item.color = prevCol\r\n        });\r\n        ref.setState({ data: modData });\r\n        dblNode = null;\r\n      };\r\n      const deleteNode = function() {\r\n        if (ref.state.data.nodes && ref.state.data.nodes.length > 1) {\r\n          const id = dblNode;\r\n          const nodes = ref.state.data.nodes.filter(item => {\r\n            return item.id !== id;\r\n          });\r\n          \r\n          const links = ref.state.data.links.filter(l => l.source !== id && l.target !== id);\r\n          console.log(links)\r\n          const data = { nodes, links };\r\n    \r\n          ref.setState({ data });\r\n        }\r\n        ref.setState({ susNodes: ref.state.data.nodes.length-ref.state.LightCoralNodes-ref.state.MediumAquaMarineNodes-1 });\r\n        dblNode = null;\r\n      }\r\n      const onClickNode = function(nodeId) {\r\n        let modData = { ...ref.state.data };\r\n        if(dblNode !== null) {\r\n            let dat = ref.state.data\r\n            if(nodeId !== dblNode){\r\n            dat.links.push({\r\n                source: dblNode,\r\n                target: nodeId,\r\n              });\r\n            }\r\n            let modData = { ...ref.state.data };\r\n            let selectNode = modData.nodes.filter(item => {\r\n              return item.id === dblNode;\r\n            });\r\n            selectNode.forEach(item => {\r\n                item.color = prevCol\r\n            });\r\n            ref.setState({ data: modData });\r\n            dblNode = null;\r\n            ref.setState({\r\n              data: dat\r\n            });\r\n          }\r\n        else {\r\n        let selectNode = modData.nodes.filter(item => {\r\n          return item.id === nodeId;\r\n        });\r\n        selectNode.forEach(item => {\r\n          if(item.color === \"LightCoral\"){\r\n            item.color = \"MediumAquaMarine\";\r\n            ref.setState({ LightCoralNodes: ref.state.LightCoralNodes-1 });\r\n            ref.setState({ MediumAquaMarineNodes: ref.state.MediumAquaMarineNodes+1 });\r\n          }\r\n          else if(item.color === \"MediumAquaMarine\"){\r\n            item.color = susCol;\r\n            ref.setState({ MediumAquaMarineNodes: ref.state.MediumAquaMarineNodes-1 });\r\n            ref.setState({ susNodes: ref.state.susNodes+1 });\r\n          }\r\n          \r\n          else {\r\n            item.color = \"LightCoral\"\r\n            ref.setState({ susNodes: ref.state.susNodes-1 });\r\n            ref.setState({ LightCoralNodes: ref.state.LightCoralNodes+1 });\r\n          }\r\n \r\n        });\r\n        ref.setState({ data: modData });\r\n      }\r\n      };\r\n\r\n      const onDoubleClickNode = function(nodeId) {\r\n        if(dblNode == null) {\r\n          dblNode = nodeId;\r\n          let modData = { ...ref.state.data };\r\n          let selectNode = modData.nodes.filter(item => {\r\n            return item.id === nodeId;\r\n          });\r\n          selectNode.forEach(item => {\r\n              prevCol = item.color;\r\n              item.color = \"purple\";\r\n          });\r\n          ref.setState({ data: modData });\r\n        }\r\n        else {\r\n          let dat = ref.state.data\r\n          dat.links.push({\r\n            source: dblNode,\r\n            target: nodeId,\r\n          });\r\n          let modData = { ...ref.state.data };\r\n          let selectNode = modData.nodes.filter(item => {\r\n            return item.id === dblNode;\r\n          });\r\n          selectNode.forEach(item => {\r\n              item.color = prevCol\r\n          });\r\n          ref.setState({ data: modData });\r\n          dblNode = null;\r\n          ref.setState({\r\n            data: dat\r\n          });\r\n      }\r\n      };\r\n\r\n      const onRightClickNode = function(event, nodeId) {\r\n        event.preventDefault();\r\n        let array = { ...ref.state.data}\r\n        let el = array.links.filter(item => {\r\n          return item.source !== nodeId && item.target !== nodeId;\r\n         });\r\n         array.links = el;\r\n        ref.setState({\r\n          data: array,\r\n        });\r\n      };\r\n\r\n      const onMouseOverNode = function(nodeId) {\r\n        if(dblNode !== null) {\r\n            let dat = ref.state.data\r\n            dat.links.push({\r\n              source: dblNode,\r\n              target: nodeId,\r\n            });\r\n            let modData = { ...ref.state.data };\r\n            \r\n            ref.setState({\r\n              data: dat\r\n            });\r\n          }\r\n      };\r\n\r\n      const onMouseOutNode = function(nodeId) {\r\n        //console.log(`Mouse out node ${nodeId}`);\r\n      };\r\n\r\n      const onClickLink = function(source, target) {\r\n        let array = { ...ref.state.data}\r\n        let el = array.links.filter(item => {\r\n          return item.source !== source || item.target !== target;\r\n         });\r\n         array.links = el;\r\n        ref.setState({\r\n          data: array,\r\n        });\r\n      };\r\n\r\n      const onRightClickLink = function(event, source, target) {\r\n\r\n      };\r\n\r\n      const onMouseOverLink = function(source, target) {\r\n       //console.log(`Mouse over in link between ${source} and ${target}`);\r\n      };\r\n\r\n      const onMouseOutLink = function(source, target) {\r\n        //console.log(`Mouse out link between ${source} and ${target}`);\r\n      };\r\n\r\n      const onNodePositionChange = function(nodeId, x, y) {\r\n        //console.log(`Node ${nodeId} is moved to new position. New position is x= ${x} y= ${y}`);\r\n      };\r\n      \r\n\r\n      const onClickAddNode = function() {\r\n        let modConfig = {...ref.state.myConfig}\r\n          modConfig[\"staticGraphWithDragAndDrop\"]=false;\r\n          ref.setState({myConfig: modConfig})\r\n\r\n        if (ref.state.data.nodes && ref.state.data.nodes.length) {\r\n          const maxIndex = ref.state.data.nodes.length - 1;\r\n          const minIndex = 0;\r\n    \r\n          let i = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex),\r\n            nLinks = Math.floor(Math.random() * (5 - minIndex + 1) + minIndex);\r\n          const newNode = `${ref.state.data.nodes.length}`;\r\n    \r\n          ref.state.data.nodes.push({ id: newNode });\r\n    \r\n          while (ref.state.data.nodes[i] && ref.state.data.nodes[i].id && nLinks) {\r\n            ref.state.data.links.push({\r\n              source: newNode,\r\n              target: ref.state.data.nodes[i].id,\r\n            });\r\n    \r\n            i++;\r\n            nLinks--;\r\n          }\r\n    \r\n          ref.setState({\r\n            data: ref.state.data,\r\n          });\r\n        } else {\r\n          // 1st node\r\n          const data = {\r\n            nodes: [{ id: \"Node 1\" }],\r\n            links: [],\r\n          };\r\n    \r\n          ref.setState({ data });\r\n          \r\n        }\r\n        ref.setState({ susNodes: ref.state.data.nodes.length-ref.state.LightCoralNodes-ref.state.MediumAquaMarineNodes });\r\n        setTimeout(() => {  \r\n          let modConfig = {...ref.state.myConfig}\r\n          modConfig[\"staticGraphWithDragAndDrop\"]=true;\r\n          ref.setState({myConfig: modConfig})}, 9000);\r\n      };\r\n\r\n      // const useSingles = function() {\r\n      //   ref.setState({ data: singles });\r\n      //   ref.setState({ saveState: singles });\r\n      //   ref.setState({ LightCoralNodes: 1 });\r\n      //   ref.setState({ MediumAquaMarineNodes: 0 });\r\n      //   ref.setState({ susNodes: 100 });\r\n        \r\n      // }\r\n\r\n      const simStep = function() {\r\n        if(ref.state.LightCoralNodes !== 0){\r\n            let selectNode = ref.state.data.nodes.filter(item => {\r\n              return item.color === \"LightCoral\";\r\n            });\r\n            let nodeIds = []\r\n            selectNode.forEach(item => {\r\n              nodeIds.push(item.id);\r\n          });\r\n\r\n            let vulnerable = []\r\n            let vulnlinks = {};\r\n            ref.state.data.links.forEach(item => {\r\n              if(nodeIds.indexOf(item.source) > -1) {\r\n                vulnerable.push(item.target)\r\n                vulnlinks[item.target]=item\r\n              }\r\n              if(nodeIds.indexOf(item.target) > -1) {\r\n                vulnerable.push(item.source)\r\n                vulnlinks[item.source]=item\r\n              }\r\n          });\r\n          let modData = { ...ref.state.data };\r\n          let nodePicks = modData.nodes.filter(item => {\r\n            return vulnerable.indexOf(item.id) > -1 && item.color !== \"LightCoral\";\r\n          });\r\n          let recPicks = modData.nodes.filter(item => {\r\n            return item.color === \"LightCoral\";\r\n          });\r\n          nodePicks.forEach(item => {\r\n            if(Math.random() > 1-ref.state.inChance && item.color!==\"MediumAquaMarine\"){\r\n                item.color = \"LightCoral\";\r\n                vulnlinks[item.id].color=\"LightCoral\"\r\n              }\r\n          });\r\n          recPicks.forEach(item => {\r\n            if(Math.random() > 1-ref.state.recChance && item.color === \"LightCoral\"){\r\n              item.color = \"MediumAquaMarine\";\r\n            }\r\n          });\r\n          ref.setState({ data: modData });\r\n          let rNum = 0\r\n          let gNum = 0\r\n          let susNum = 0\r\n          ref.state.data.nodes.forEach(item => {\r\n            if(item.color === \"LightCoral\"){\r\n              rNum=rNum+1;\r\n            }\r\n            else if(item.color === \"MediumAquaMarine\"){\r\n              gNum=gNum+1;\r\n            }\r\n            else {\r\n              susNum=susNum+1;\r\n            }\r\n        });\r\n        ref.setState({ LightCoralNodes: rNum });\r\n        ref.setState({ MediumAquaMarineNodes: gNum });\r\n        ref.setState({ susNodes: susNum });\r\n        \r\n\r\n        ref.setState({xVal: ref.state.xVal+1})\r\n        let newlines = ref.state.linedata;\r\n        newlines[0].values.push({x: ref.state.xVal+1, y: susNum})\r\n        newlines[1].values.push({x: ref.state.xVal+1, y: rNum})\r\n        newlines[2].values.push({x: ref.state.xVal+1, y: gNum})\r\n        ref.setState({linedata: newlines})\r\n      }\r\n        \r\n          \r\n      }\r\n      const onClickRemoveNode  = function() {\r\n        if (ref.state.data.nodes && ref.state.data.nodes.length > 1) {\r\n          const id = ref.state.data.nodes[0].id;\r\n    \r\n          ref.state.data.nodes.splice(0, 1);\r\n          const links = ref.state.data.links.filter(l => l.source !== id && l.target !== id);\r\n          const data = { nodes: ref.state.data.nodes, links };\r\n    \r\n          ref.setState({ data });\r\n        }\r\n        ref.setState({ susNodes: ref.state.data.nodes.length-ref.state.LightCoralNodes-ref.state.MediumAquaMarineNodes-1 });\r\n      }\r\n      const restartSimulation  = function() {\r\n        pause()\r\n        let modData = { ...ref.state.data };\r\n        modData.nodes.forEach(item => {\r\n            item.color = susCol;\r\n        });\r\n        modData.links.forEach(item => {\r\n          item.color = \"#d3d3d3\";\r\n      });\r\n        ref.setState({ data: modData });\r\n        ref.setState({xVal: 0})\r\n        ref.setState({ linedata: [\r\n          {\r\n          label: 'Susceptible',\r\n          values: [{x: 0.1, y: 100}]\r\n          },\r\n          {\r\n          label: 'Infected',\r\n          values: [{x: 0, y: 0}]\r\n          },\r\n          {\r\n          label: 'Recovered',\r\n          values: [{x: 0, y: 0}]\r\n          }\r\n      ] });\r\n        let rNum = 0\r\n        let gNum = 0\r\n        let susNum = 0\r\n        ref.state.data.nodes.forEach(item => {\r\n          if(item.color === \"LightCoral\"){\r\n            rNum=rNum+1;\r\n          }\r\n          else if(item.color === \"MediumAquaMarine\"){\r\n            gNum=gNum+1;\r\n          }\r\n          else {\r\n            susNum=susNum+1;\r\n          }\r\n      });\r\n      ref.setState({ LightCoralNodes: rNum });\r\n      ref.setState({ MediumAquaMarineNodes: gNum });\r\n      ref.setState({ susNodes: susNum });\r\n       \r\n      };\r\n      const play = () => {\r\n        let intervalId = setInterval(simStep, ref.state.simSpeed)\r\n        this.setState({ intervalId: intervalId })\r\n      }\r\n      const pause = () => {\r\n        clearInterval(this.state.intervalId)\r\n        \r\n      }\r\n      const oneStep = () => {\r\n        saveState= JSON.parse(JSON.stringify(airport))\r\n        simStep()\r\n        \r\n      }\r\n      const tooltipLine = function(label, data) {\r\n        return label;\r\n    }\r\n    const colorLine = function(label, data) {\r\n      if(label === 'Susceptible'){\r\n        return \"DarkKhaki\"\r\n      }\r\n      if(label === 'Infected'){\r\n        return \"LightCoral\"\r\n      }\r\n      return \"MediumAquaMarine\";\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <div className = \"one\">\r\n      <div className = \"ones\">\r\n      <div className = \"buttons\">\r\n          <button className = \"circleButton\" onClick={onClickAddNode}>\r\n              +\r\n            </button>\r\n            \r\n            <button className = \"circleButton\" onClick={onClickRemoveNode}>\r\n              -\r\n            </button>\r\n          <button className = \"homeButton\" onClick={deleteNode}>Delete Selected Node</button>\r\n            <br></br>\r\n          <button className = \"homeButton\" onClick={oneStep}>Step Forward</button>\r\n          <br></br>\r\n          <button className = \"homeButton\" onClick={restartSimulation}>Reset</button>\r\n          <br></br>\r\n          Infection Chance: <input\r\n                name=\"inChance\"\r\n                type=\"range\"\r\n                min=\"1\"\r\n                max=\"100\"\r\n                value={this.state.inChance*100}\r\n                onChange={this.changeInChance} />{\r\n                  parseInt(this.state.inChance*100)}%\r\n          <br></br>\r\n          Recovery Chance: <input\r\n              name=\"recChance\"\r\n              type=\"range\"\r\n              min=\"1\"\r\n              max=\"100\"\r\n              value={this.state.recChance*100}\r\n              onChange={this.changeRecChance} />{\r\n                parseInt(this.state.recChance*100)}%\r\n              <br></br>\r\n              <br></br>\r\n          <button className = \"homeButton\" onClick={play}>Play</button>\r\n          <button className = \"homeButton\" onClick={pause}>Pause</button>\r\n          <br></br>\r\n          Speed of Simulation: \r\n          <br></br>\r\n          fast<input\r\n              name=\"simSpeed\"\r\n              type=\"range\"\r\n              min=\"1\"\r\n              max=\"1000\"\r\n              value={this.state.simSpeed}\r\n              onChange={this.changeSimSpeed} />slow\r\n              <br></br>\r\n          <br></br>\r\n          <div><span className = \"circle3\"></span>Susceptible: {this.state.susNodes}</div>\r\n          <div><span className = \"circle1\"></span> Infected: {this.state.LightCoralNodes}</div>\r\n          <div><span className = \"circle2\"></span>Recovered: {this.state.MediumAquaMarineNodes}</div>\r\n          </div>\r\n          </div>\r\n          </div>\r\n\r\n          \r\n        \r\n        <div className=\"col-9 two\">\r\n          <Graph\r\n              id=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\r\n              data={this.state.data}\r\n              config={this.state.myConfig}\r\n              onClickNode={onClickNode}\r\n              onDoubleClickNode={onDoubleClickNode}\r\n              onRightClickNode={onRightClickNode}\r\n              onClickGraph={onClickGraph}\r\n              onClickLink={onClickLink}\r\n              onRightClickLink={onRightClickLink}\r\n              onMouseOverNode={onMouseOverNode}\r\n              onMouseOutNode={onMouseOutNode}\r\n              onMouseOverLink={onMouseOverLink}\r\n              onMouseOutLink={onMouseOutLink}\r\n              onNodePositionChange={onNodePositionChange}\r\n            />\r\n        </div>\r\n        <br></br>\r\n          <br></br>\r\n        <div className=\"row graph\">\r\n          <LineChart\r\n                data={this.state.linedata}\r\n                width={window.innerWidth/1.1}\r\n                colorScale = { colorLine }\r\n                tooltipHtml={tooltipLine}\r\n                height={400}\r\n                strokeDasharray=\"3 3\"\r\n                margin={{top: 10, bottom: 50, left: 50, right: 10}}/>\r\n          </div>\r\n          \r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default Simulation;\r\n"]},"metadata":{},"sourceType":"module"}