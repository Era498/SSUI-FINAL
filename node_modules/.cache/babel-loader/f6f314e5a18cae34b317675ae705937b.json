{"ast":null,"code":"var _jsxFileName = \"/Users/Ginny 1/SSUI-Final/src/containers/Show.js\";\n// need to add loader logic\nimport data from '../components/data/data.json';\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Province from '../components/Province';\nimport State from '../components/State';\nimport Country from '../components/Country';\nimport { Card } from 'react-bootstrap';\nimport { Col } from 'react-bootstrap';\nimport { Row } from 'react-bootstrap';\nimport { selectAll } from 'd3';\n\nconst Show = props => {\n  const cache = useSelector(state => state.cache);\n  const provincesData = useSelector(state => state.provincesData);\n  const countryData = useSelector(state => state.countryData);\n  const [caseType, setCaseType] = useState(\"\");\n  const [provinces, setProvinces] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useDispatch();\n  const url = \"https://api.covid19api.com/dayone/country/\" + props.location.slug;\n  useEffect(() => {\n    async function fetchData() {\n      if (cache[props.location.slug]) {\n        console.log(\"true - using cached data\");\n        dispatch({\n          type: 'addProvincesData',\n          payload: cache[props.location.slug]\n        });\n        const provinceArray = [];\n        cache[props.location.slug].forEach(d => {\n          if (!provinceArray.includes(d.Province) && d.Province !== \"\") {\n            provinceArray.push(d.Province);\n          } else if (!provinceArray.includes(\"\") && d.Province === \"\") provinceArray.push(\"\");\n        });\n        const sortedProvinces = provinceArray.sort((a, b) => a > b ? 1 : -1);\n        setProvinces(sortedProvinces);\n      } else if (props.location.slug === \"united-states\") {\n        dispatch({\n          type: 'cacheData',\n          payload: {\n            slug: props.location.slug,\n            data\n          }\n        }); // fetch US data from 05/01/20 onwards and add to cache\n\n        var requestOptions = {\n          method: 'GET',\n          redirect: 'follow'\n        };\n        const url = \"https://api.covid19api.com/live/country/united-states/status/confirmed/date/2020-08-12T13:13:30Z\"; // const url = \"https://api.covid19api.com/live/country/united-states/status/confirmed/date/2020-05-01T13:13:30Z\"\n\n        const response = await fetch(url, requestOptions);\n        const fetchedData = await response.json();\n        dispatch({\n          type: 'addToCachedData',\n          payload: fetchedData\n        }); // dispatch({ type: 'addProvincesData', payload: cache[\"united-states\"] })\n\n        dispatch({\n          type: 'addProvincesData',\n          payload: data.concat(fetchedData)\n        }); // const provinceArray = []\n        // data.concat(fetchedData).forEach(d => {\n        //     if (!provinceArray.includes(d.Province) && d.Province !== \"\") {\n        //         provinceArray.push(d.Province)\n        //     } else if (!provinceArray.includes(\"\") && d.Province === \"\")\n        //         provinceArray.push(\"\")\n        // })\n        // const sortedProvinces = provinceArray.sort((a,b) => a > b ? 1 : -1)\n        // setProvinces(sortedProvinces)\n      } else {\n        var requestOptions = {\n          method: 'GET',\n          redirect: 'follow'\n        };\n        const response = await fetch(url, requestOptions);\n        const data = await response.json();\n        dispatch({\n          type: 'cacheData',\n          payload: {\n            slug: props.location.slug,\n            data\n          }\n        });\n        dispatch({\n          type: 'addProvincesData',\n          payload: data\n        });\n        const provinceArray = [];\n        data.forEach(d => {\n          if (!provinceArray.includes(d.Province) && d.Province !== \"\") {\n            provinceArray.push(d.Province);\n          } else if (!provinceArray.includes(\"\") && d.Province === \"\") provinceArray.push(\"\");\n        });\n        setProvinces(provinceArray.sort((a, b) => a > b ? 1 : -1));\n      }\n    }\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: \"12\",\n    sm: \"6\",\n    md: \"4\",\n    lg: \"3\",\n    xl: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: event => (setCaseType(event.target.value), selectAll(\"svg\").remove()),\n    className: \"cases block\",\n    value: \"total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 29\n    }\n  }, \"Total Cases\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: event => (setCaseType(event.target.value), selectAll(\"svg\").remove()),\n    className: \"deathsPerOneMillion block\",\n    value: \"deaths\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 29\n    }\n  }, \"Deaths\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: event => (setCaseType(event.target.value), selectAll(\"svg\").remove()),\n    className: \"activee block\",\n    value: \"active\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 29\n    }\n  }, \" Active Cases\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: event => (setCaseType(event.target.value), selectAll(\"svg\").remove()),\n    className: \"recovered block\",\n    value: \"recovered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 29\n    }\n  }, \"Recovered Cases\"))), /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"9\",\n    lg: \"9\",\n    xl: \"9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Country, {\n    caseType: caseType,\n    country: countryData[0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 29\n    }\n  }))))); // Logic if country is United States (because state data is broken down into cities)\n  // if (provinces.includes(\"Alabama\")) {\n  //         return (\n  //             <div>\n  //                 <Row >\n  //                     <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n  //                         <Card>\n  //                             <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n  //                             <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n  //                             <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n  //                             <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n  //                         </Card>\n  //                     </Col>\n  //                     {provinces.map((state, index) => { \n  //                             return (\n  //                                 <Col xs={12} sm={6} md={4} lg={3} key={index}>\n  //                                     <Card>\n  //                                         <State caseType={caseType} state={state} stateData={provincesData.filter(day => day.Province === state)} countryName={provincesData[0].Country}/>\n  //                                     </Card>\n  //                                 </Col>\n  //                             )\n  //                         })\n  //                     } \n  //                 </Row>\n  //             </div>\n  //         )\n  // Logic for countries that are not broken down into provinces (such as Mexico)\n  // } else if (provinces.length === 1) {\n  //     return (\n  //         <div>\n  //             <Row >\n  //                 <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n  //                     <Card>\n  //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n  //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n  //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n  //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n  //                     </Card>\n  //                 </Col>\n  //                 <Col sm=\"12\" md=\"9\" lg=\"9\" xl=\"9\">\n  //                     <Card>\n  //                         <Province caseType={caseType} province={provincesData[0].Country} provinceData={provincesData}/> \n  //                     </Card>\n  //                 </Col>\n  //             </Row>\n  //         </div>\n  //     )\n  // Logic for all other countries that have data broken down by province (such as China, or United Kingdom)\n  // } else {\n  //     return (\n  //         <div>\n  //             <Row >\n  //                 <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n  //                     <Card>\n  //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n  //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n  //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n  //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n  //                     </Card>\n  //                 </Col>\n  //                 {provinces.map((province, index) => { \n  //                         return (\n  //                             <Col xs={12} sm={6} md={4} lg={3} key={index}>\n  //                                 <Card>\n  //                                     <Province caseType={caseType} province={province} provinceData={provincesData.filter(day => day.Province === province)}/> \n  //                                 </Card>\n  //                             </Col>\n  //                         )\n  //                     })\n  //                 } \n  //             </Row>\n  //         </div>\n  //     )\n  // }\n};\n\nexport default Show;","map":{"version":3,"sources":["/Users/Ginny 1/SSUI-Final/src/containers/Show.js"],"names":["data","React","useState","useEffect","useSelector","useDispatch","Province","State","Country","Card","Col","Row","selectAll","Show","props","cache","state","provincesData","countryData","caseType","setCaseType","provinces","setProvinces","isLoading","setIsLoading","dispatch","url","location","slug","fetchData","console","log","type","payload","provinceArray","forEach","d","includes","push","sortedProvinces","sort","a","b","requestOptions","method","redirect","response","fetch","fetchedData","json","concat","event","target","value","remove"],"mappings":"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E,EAAC,GAAhB;AAAoB,IAAA,EAAE,EAAC,GAAvB;AAA2B,IAAA,EAAE,EAAC,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAEnC,QAAnB;AAA6B,IAAA,OAAO,EAAED,WAAW,CAAC,CAAD,CAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CAVJ,CADJ,CADJ,CAvFgB,CA6GZ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEX,CA9LD;;AAgMA,eAAeL,IAAf","sourcesContent":["// need to add loader logic\nimport data from '../components/data/data.json'\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Province from '../components/Province'\nimport State from '../components/State'\nimport Country from '../components/Country'\n\nimport { Card } from 'react-bootstrap'\nimport { Col } from 'react-bootstrap'\nimport { Row } from 'react-bootstrap'\n\nimport { selectAll } from 'd3'\n\n\n\nconst Show = (props) => {\n    const cache = useSelector(state => state.cache)\n    const provincesData = useSelector(state => state.provincesData)\n    const countryData = useSelector(state => state.countryData)\n    const [caseType, setCaseType] = useState(\"\");\n    const [provinces, setProvinces] = useState([])\n    const [isLoading, setIsLoading] = useState(false);\n    const dispatch = useDispatch()\n    const url = \"https://api.covid19api.com/dayone/country/\" + props.location.slug\n\n\n    useEffect( () => {\n        async function fetchData() {\n\n            if (cache[props.location.slug]) {\n                console.log(\"true - using cached data\")\n                dispatch({ type: 'addProvincesData', payload: cache[props.location.slug] })\n\n                const provinceArray = []\n                cache[props.location.slug].forEach(d => {\n                    if (!provinceArray.includes(d.Province) && d.Province !== \"\") {\n                        provinceArray.push(d.Province)\n                    } else if (!provinceArray.includes(\"\") && d.Province === \"\")\n                        provinceArray.push(\"\")\n                })\n                const sortedProvinces = provinceArray.sort((a,b) => a > b ? 1 : -1)\n                setProvinces(sortedProvinces)\n\n\n\n            } else if (props.location.slug === \"united-states\") {\n                dispatch({ type: 'cacheData', payload: {slug: props.location.slug, data} })\n\n                // fetch US data from 05/01/20 onwards and add to cache\n                var requestOptions = {\n                    method: 'GET',\n                    redirect: 'follow'\n                };\n\n                const url = \"https://api.covid19api.com/live/country/united-states/status/confirmed/date/2020-08-12T13:13:30Z\"\n                // const url = \"https://api.covid19api.com/live/country/united-states/status/confirmed/date/2020-05-01T13:13:30Z\"\n                const response = await fetch(url, requestOptions)\n                const fetchedData = await response.json()\n                dispatch({ type: 'addToCachedData', payload: fetchedData })\n                // dispatch({ type: 'addProvincesData', payload: cache[\"united-states\"] })\n                dispatch({ type: 'addProvincesData', payload: data.concat(fetchedData) })\n\n\n\n                // const provinceArray = []\n                // data.concat(fetchedData).forEach(d => {\n                //     if (!provinceArray.includes(d.Province) && d.Province !== \"\") {\n                //         provinceArray.push(d.Province)\n                //     } else if (!provinceArray.includes(\"\") && d.Province === \"\")\n                //         provinceArray.push(\"\")\n                // })\n                // const sortedProvinces = provinceArray.sort((a,b) => a > b ? 1 : -1)\n                // setProvinces(sortedProvinces)\n\n\n\n\n            } else {\n\n                var requestOptions = {\n                    method: 'GET',\n                    redirect: 'follow'\n                };\n\n                const response = await fetch(url, requestOptions)\n                const data = await response.json()\n                dispatch({ type: 'cacheData', payload: {slug: props.location.slug, data} })\n                dispatch({ type: 'addProvincesData', payload: data})\n\n                const provinceArray = []\n                data.forEach(d => {\n                    if (!provinceArray.includes(d.Province) && d.Province !== \"\") {\n                        provinceArray.push(d.Province)\n                    } else if (!provinceArray.includes(\"\") && d.Province === \"\")\n                        provinceArray.push(\"\")\n                })\n                \n                setProvinces(provinceArray.sort((a,b) => a > b ? 1 : -1))\n            }\n        }\n        fetchData();\n    }, []); \n        return (\n            <div>\n                <Row >\n                    <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n                        <Card>\n                            <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n                            <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n                            <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n                            <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n                        </Card>\n                    </Col>\n\n                    <Col sm=\"12\" md=\"9\" lg=\"9\" xl=\"9\">\n                        <Card>\n                            <Country caseType={caseType} country={countryData[0]}/>\n                            {/* <Province caseType={caseType} province={provincesData[0].Country} provinceData={provincesData}/>  */}\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        )\n\n            // Logic if country is United States (because state data is broken down into cities)\n        // if (provinces.includes(\"Alabama\")) {\n        //         return (\n        //             <div>\n        //                 <Row >\n        //                     <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n        //                         <Card>\n        //                             <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n        //                             <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n        //                             <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n        //                             <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n        //                         </Card>\n        //                     </Col>\n\n        //                     {provinces.map((state, index) => { \n\n        //                             return (\n        //                                 <Col xs={12} sm={6} md={4} lg={3} key={index}>\n        //                                     <Card>\n        //                                         <State caseType={caseType} state={state} stateData={provincesData.filter(day => day.Province === state)} countryName={provincesData[0].Country}/>\n        //                                     </Card>\n        //                                 </Col>\n        //                             )\n        //                         })\n        //                     } \n        //                 </Row>\n        //             </div>\n        //         )\n\n            // Logic for countries that are not broken down into provinces (such as Mexico)\n            // } else if (provinces.length === 1) {\n            //     return (\n            //         <div>\n            //             <Row >\n            //                 <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n            //                     <Card>\n            //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n            //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n            //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n            //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n            //                     </Card>\n            //                 </Col>\n\n            //                 <Col sm=\"12\" md=\"9\" lg=\"9\" xl=\"9\">\n            //                     <Card>\n            //                         <Province caseType={caseType} province={provincesData[0].Country} provinceData={provincesData}/> \n            //                     </Card>\n            //                 </Col>\n            //             </Row>\n            //         </div>\n            //     )\n\n            // Logic for all other countries that have data broken down by province (such as China, or United Kingdom)\n            // } else {\n            //     return (\n            //         <div>\n            //             <Row >\n            //                 <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n            //                     <Card>\n            //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n            //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n            //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n            //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n            //                     </Card>\n            //                 </Col>\n\n            //                 {provinces.map((province, index) => { \n            //                         return (\n            //                             <Col xs={12} sm={6} md={4} lg={3} key={index}>\n            //                                 <Card>\n            //                                     <Province caseType={caseType} province={province} provinceData={provincesData.filter(day => day.Province === province)}/> \n            //                                 </Card>\n            //                             </Col>\n            //                         )\n            //                     })\n            //                 } \n            //             </Row>\n            //         </div>\n            //     )\n            // }\n\n}\n\nexport default Show"]},"metadata":{},"sourceType":"module"}