{"ast":null,"code":"import { select, json, geoPath, geoNaturalEarth1, tsv, zoom, event } from 'd3';\nimport { feature } from 'topojson';\n\nconst DrawMap = () => {\n  console.log(\"drawing map\"); // setting up svg element on Home component; making size responsive\n\n  const height = 500;\n  const width = 960;\n  const svg = select(\".mapviz\").append(\"svg\").attr(\"preserveAspectRatio\", \"xMinYMid meet\").attr(\"viewBox\", [0, 0, width, height]); // specifying map projection\n\n  const projection = geoNaturalEarth1();\n  const pathGenerator = geoPath().projection(projection); // creating a group to arrange map elements\n\n  const g = svg.append(\"g\").attr(\"class\", \"map-group\");\n  g.append('path').attr('class', 'sphere').attr('d', pathGenerator({\n    type: 'Sphere'\n  })); // enabling zooming/panning on entire svg\n\n  svg.call(zoom().on(\"zoom\", () => {\n    g.attr(\"transform\", event.transform);\n  })); // fetching and loading geographic data\n  // tsvData supplies country names\n  // topoJSONdata supplies geographic coordinates for each country\n\n  Promise.all([tsv('https://unpkg.com/world-atlas@1.1.4/world/50m.tsv'), json('https://unpkg.com/world-atlas@1.1.4/world/50m.json')]).then(([tsvData, topoJSONdata]) => {\n    // parses tsvData to extract country names for base map titles\n    const countryName = {};\n    tsvData.forEach(d => {\n      countryName[d.iso_n3] = d.name;\n    }); // draws a path for each country with countryName as title (shown on hover)\n\n    const countries = feature(topoJSONdata, topoJSONdata.objects.countries);\n    g.selectAll('path').data(countries.features).enter().append('path').attr('class', 'country').attr('d', pathGenerator).append(\"title\").text(d => countryName[d.id]);\n  });\n};\n\nexport default DrawMap;","map":{"version":3,"sources":["/Users/Ginny 1/SSUI-Final/src/d3/DrawMap.js"],"names":["select","json","geoPath","geoNaturalEarth1","tsv","zoom","event","feature","DrawMap","console","log","height","width","svg","append","attr","projection","pathGenerator","g","type","call","on","transform","Promise","all","then","tsvData","topoJSONdata","countryName","forEach","d","iso_n3","name","countries","objects","selectAll","data","features","enter","text","id"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,OAAvB,EAAgCC,gBAAhC,EAAkDC,GAAlD,EAAuDC,IAAvD,EAA6DC,KAA7D,QAA0E,IAA1E;AACA,SAASC,OAAT,QAAwB,UAAxB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAClBC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EADkB,CAGlB;;AACA,QAAMC,MAAM,GAAG,GAAf;AACA,QAAMC,KAAK,GAAG,GAAd;AAEA,QAAMC,GAAG,GAAGb,MAAM,CAAC,SAAD,CAAN,CAAkBc,MAAlB,CAAyB,KAAzB,EACPC,IADO,CACF,qBADE,EACqB,eADrB,EAEPA,IAFO,CAEF,SAFE,EAES,CAAC,CAAD,EAAI,CAAJ,EAAOH,KAAP,EAAcD,MAAd,CAFT,CAAZ,CAPkB,CAWlB;;AACA,QAAMK,UAAU,GAAGb,gBAAgB,EAAnC;AACA,QAAMc,aAAa,GAAGf,OAAO,GAAGc,UAAV,CAAqBA,UAArB,CAAtB,CAbkB,CAelB;;AACA,QAAME,CAAC,GAAGL,GAAG,CAACC,MAAJ,CAAW,GAAX,EACLC,IADK,CACA,OADA,EACS,WADT,CAAV;AAEAG,EAAAA,CAAC,CAACJ,MAAF,CAAS,MAAT,EACKC,IADL,CACU,OADV,EACmB,QADnB,EAEKA,IAFL,CAEU,GAFV,EAEeE,aAAa,CAAC;AAACE,IAAAA,IAAI,EAAE;AAAP,GAAD,CAF5B,EAlBkB,CAwBlB;;AACAN,EAAAA,GAAG,CAACO,IAAJ,CAASf,IAAI,GAAGgB,EAAP,CAAU,MAAV,EAAkB,MAAM;AAC7BH,IAAAA,CAAC,CAACH,IAAF,CAAO,WAAP,EAAoBT,KAAK,CAACgB,SAA1B;AACH,GAFQ,CAAT,EAzBkB,CAgClB;AACI;AACA;;AACJC,EAAAA,OAAO,CAACC,GAAR,CAAY,CACRpB,GAAG,CAAC,mDAAD,CADK,EAERH,IAAI,CAAC,oDAAD,CAFI,CAAZ,EAICwB,IAJD,CAIM,CAAC,CAAEC,OAAF,EAAWC,YAAX,CAAD,KAA+B;AAEjC;AACA,UAAMC,WAAW,GAAG,EAApB;AACAF,IAAAA,OAAO,CAACG,OAAR,CAAgBC,CAAC,IAAI;AACjBF,MAAAA,WAAW,CAACE,CAAC,CAACC,MAAH,CAAX,GAAwBD,CAAC,CAACE,IAA1B;AACH,KAFD,EAJiC,CAQjC;;AACA,UAAMC,SAAS,GAAG1B,OAAO,CAACoB,YAAD,EAAeA,YAAY,CAACO,OAAb,CAAqBD,SAApC,CAAzB;AACAf,IAAAA,CAAC,CAACiB,SAAF,CAAY,MAAZ,EAAoBC,IAApB,CAAyBH,SAAS,CAACI,QAAnC,EACCC,KADD,GACSxB,MADT,CACgB,MADhB,EAEKC,IAFL,CAEU,OAFV,EAEmB,SAFnB,EAGKA,IAHL,CAGU,GAHV,EAGeE,aAHf,EAICH,MAJD,CAIQ,OAJR,EAKKyB,IALL,CAKUT,CAAC,IAAIF,WAAW,CAACE,CAAC,CAACU,EAAH,CAL1B;AAMH,GApBD;AAqBH,CAxDD;;AA0DA,eAAehC,OAAf","sourcesContent":["import { select, json, geoPath, geoNaturalEarth1, tsv, zoom, event } from 'd3';\nimport { feature } from 'topojson';\n\nconst DrawMap = () => {\n    console.log(\"drawing map\")\n\n    // setting up svg element on Home component; making size responsive\n    const height = 500\n    const width = 960\n\n    const svg = select(\".mapviz\").append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMid meet\")\n        .attr(\"viewBox\", [0, 0, width, height])\n\n    // specifying map projection\n    const projection = geoNaturalEarth1();\n    const pathGenerator = geoPath().projection(projection);\n\n    // creating a group to arrange map elements\n    const g = svg.append(\"g\")\n        .attr(\"class\", \"map-group\")\n    g.append('path')\n        .attr('class', 'sphere')\n        .attr('d', pathGenerator({type: 'Sphere'}));\n\n\n\n    // enabling zooming/panning on entire svg\n    svg.call(zoom().on(\"zoom\", () => {\n        g.attr(\"transform\", event.transform)\n    }))\n\n\n\n    \n    // fetching and loading geographic data\n        // tsvData supplies country names\n        // topoJSONdata supplies geographic coordinates for each country\n    Promise.all([\n        tsv('https://unpkg.com/world-atlas@1.1.4/world/50m.tsv'),\n        json('https://unpkg.com/world-atlas@1.1.4/world/50m.json')\n    ])\n    .then(([ tsvData, topoJSONdata ]) => {\n\n        // parses tsvData to extract country names for base map titles\n        const countryName = {}\n        tsvData.forEach(d => {\n            countryName[d.iso_n3] = d.name\n        })\n\n        // draws a path for each country with countryName as title (shown on hover)\n        const countries = feature(topoJSONdata, topoJSONdata.objects.countries);\n        g.selectAll('path').data(countries.features)\n        .enter().append('path')\n            .attr('class', 'country')\n            .attr('d', pathGenerator)\n        .append(\"title\")\n            .text(d => countryName[d.id])\n    })\n}\n\nexport default DrawMap"]},"metadata":{},"sourceType":"module"}