{"ast":null,"code":"var _jsxFileName = \"/Users/Ginny 1/SSUI-Final/src/components/CountryDropdown.js\";\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { Row } from 'react-bootstrap';\nimport { Col } from 'react-bootstrap';\nimport { Card } from 'react-bootstrap';\n\nconst CountryDropdown = props => {\n  const countries = useSelector(state => state.countries);\n  const collection = useSelector(state => state.collection);\n  const dispatch = useDispatch();\n\n  const fetchCountry = event => {\n    const [slug, country, ISO2] = event.target.value.split(\",\");\n\n    async function fetchData() {\n      const requestOptions = {\n        method: 'GET',\n        redirect: 'follow'\n      };\n      const response = await fetch(`https://api.covid19api.com/total/country/` + slug, requestOptions);\n      const data = await response.json();\n      const parsedData = data.filter(day => day.Confirmed > 0);\n      dispatch({\n        type: 'addCountryData',\n        payload: {\n          [country]: parsedData\n        }\n      });\n      dispatch({\n        type: 'addCountryToCollection',\n        payload: {\n          slug,\n          country,\n          ISO2\n        }\n      });\n    }\n\n    fetchData();\n  };\n\n  const invalid = () => collection.length === 0;\n\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: \"12\",\n    sm: \"6\",\n    md: \"6\",\n    lg: \"4\",\n    xl: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    onChange: event => fetchCountry(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    placeholder: \"Choose the country you want to display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }, \" Choose the country you want to display \"), countries.sort((a, b) => a.Country > b.Country ? 1 : -1).map(country => /*#__PURE__*/React.createElement(\"option\", {\n    id: country.Slug,\n    key: country.Slug,\n    value: [country.Slug, country.Country, country.ISO2],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 25\n    }\n  }, country.Country)))), /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"6\",\n    lg: \"8\",\n    lg: \"8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, collection.map((country, index) => {\n    const flagUrl = `https://disease.sh/assets/img/flags/${country.ISO2.toLowerCase()}.png`;\n    const worldUrl = `https://freesvg.org/img/Globe-Icon-Umber.png`;\n    return /*#__PURE__*/React.createElement(Col, {\n      sm: 12,\n      md: 6,\n      lg: 4,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 33\n      }\n    }, country.country), /*#__PURE__*/React.createElement(Card.Img, {\n      key: country.slug,\n      src: flagUrl,\n      onError: e => {\n        if (e.target.src !== worldUrl) {\n          e.target.src = worldUrl;\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 33\n      }\n    })));\n  })));\n};\n\nexport default CountryDropdown;","map":{"version":3,"sources":["/Users/Ginny 1/SSUI-Final/src/components/CountryDropdown.js"],"names":["React","useSelector","useDispatch","NavLink","Row","Col","Card","CountryDropdown","props","countries","state","collection","dispatch","fetchCountry","event","slug","country","ISO2","target","value","split","fetchData","requestOptions","method","redirect","response","fetch","data","json","parsedData","filter","day","Confirmed","type","payload","invalid","length","sort","a","b","Country","map","Slug","index","flagUrl","toLowerCase","worldUrl","e","src"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { NavLink } from 'react-router-dom';\nimport { Row } from 'react-bootstrap'\nimport { Col } from 'react-bootstrap'\nimport { Card } from 'react-bootstrap'\n\nconst CountryDropdown = (props) => {\n\n    const countries = useSelector(state => state.countries)\n    const collection = useSelector(state => state.collection)\n    const dispatch = useDispatch()\n\n    const fetchCountry = (event) => {\n        const [slug, country, ISO2] = event.target.value.split(\",\") \n\n        async function fetchData() {\n\n            const requestOptions = {\n                method: 'GET',\n                redirect: 'follow'\n            };\n            \n            const response = await fetch(`https://api.covid19api.com/total/country/` + slug, requestOptions)\n\n            const data = await response.json()\n            const parsedData = data.filter(day => day.Confirmed > 0)\n\n            dispatch( { type: 'addCountryData', payload: { [country]: parsedData }} )\n            dispatch( { type: 'addCountryToCollection', payload: {slug, country, ISO2}} )\n        }\n        fetchData();\n    }\n\n    const invalid = () => collection.length === 0\n\n    return (\n        <Row>\n            <Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"4\" xl=\"4\">\n\n                <select onChange={event => fetchCountry(event)}>\n                \n                    <option placeholder=\"Choose the country you want to display\"> Choose the country you want to display </option>\n                    {countries.sort((a, b) => (a.Country > b.Country) ? 1 : -1).map(country => (\n                        <option\n                            id={country.Slug}\n                            key={country.Slug}\n                            value={[country.Slug, country.Country, country.ISO2]}\n                        >\n                        {country.Country}\n                        </option> \n                    ))}\n                </select>\n\n\n\n                {/* <NavLink to='/collection'>\n                    <button className=\"dark\" disabled={invalid()}>View Collection</button>\n                </NavLink> */}\n\n            </Col>\n                <Col  sm=\"12\" md=\"6\" lg=\"8\" lg=\"8\">\n                    {collection.map( (country, index) => {\n                        const flagUrl = `https://disease.sh/assets/img/flags/${country.ISO2.toLowerCase()}.png`\n                        const worldUrl = `https://freesvg.org/img/Globe-Icon-Umber.png`\n\n                        return (\n                            <Col sm={12} md={6} lg={4} key={index}>\n\n                            <Card>\n                                <Card.Header>{country.country}</Card.Header>\n\n                                <Card.Img key={country.slug} src={flagUrl} onError={(e)=>{ \n                                    if (e.target.src !== worldUrl) {\n                                        e.target.src=worldUrl;}\n                                    }}/>\n                            </Card>\n                            </Col>\n                        )\n                    })}\n                </Col>\n\n        </Row>\n\n    )\n}\n\nexport default CountryDropdown\n\n\n\n"]},"metadata":{},"sourceType":"module"}