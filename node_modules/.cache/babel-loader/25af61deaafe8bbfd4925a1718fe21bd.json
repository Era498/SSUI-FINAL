{"ast":null,"code":"var _jsxFileName = \"/Users/Ginny 1/SSUI-Final/src/components/CountryDropdown.js\";\nimport React from 'react';\nimport Viz from '../d3/Viz';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport \"./CountryDropdown.css\";\nimport Delete from \"../img/delete.png\";\n\nconst CountryDropdown = props => {\n  const countries = useSelector(state => state.countries);\n  const collection = useSelector(state => state.collection);\n  const dispatch = useDispatch();\n  const countryName = Object.keys(country)[0];\n\n  const totalCases = () => dailyData.length === 0 ? 0 : dailyData[dailyData.length - 1].Confirmed;\n\n  const array = [];\n\n  const parseData = (data, array) => {\n    data.forEach((day, index) => {\n      array.push({\n        dayCount: index + 1,\n        date: new Date(day.Date),\n        total: day.Confirmed,\n        active: day.Active,\n        recovered: day.Recovered,\n        deaths: day.Deaths\n      });\n    });\n    return array;\n  }; // Fetch specific country covid data based on user's choice in the select option\n\n\n  const fetchCountry = event => {\n    const [slug, country, ISO2] = event.target.value.split(\",\");\n\n    async function fetchData() {\n      const requestOptions = {\n        method: 'GET',\n        redirect: 'follow'\n      };\n      const response = await fetch(`https://api.covid19api.com/total/country/` + slug, requestOptions);\n      const data = await response.json();\n      const parsedData = data.filter(day => day.Confirmed > 0);\n      dispatch({\n        type: 'addCountryData',\n        payload: {\n          [country]: parsedData\n        }\n      });\n      dispatch({\n        type: 'addCountryToCollection',\n        payload: {\n          slug,\n          country,\n          ISO2\n        }\n      });\n    }\n\n    fetchData();\n  };\n\n  const invalid = () => collection.length === 0;\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-sm-12 col-md-6 col-lg-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, \" Choose the country you want to display\"), /*#__PURE__*/React.createElement(\"select\", {\n    onChange: event => fetchCountry(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    placeholder: \"Countries\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }\n  }, \" Countries \"), countries.sort((a, b) => a.Country > b.Country ? 1 : -1).map(country => /*#__PURE__*/React.createElement(\"option\", {\n    id: country.Slug,\n    key: country.Slug,\n    value: [country.Slug, country.Country, country.ISO2],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }\n  }, country.Country))), /*#__PURE__*/React.createElement(NavLink, {\n    to: \"/collection\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"dark\",\n    disabled: invalid(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, \"View plots side by side\")), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"dark\",\n    disabled: invalid(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, \" View overlay plot \")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-sm-12 col-md-6 col-lg-9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"countries\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, collection.map((country, index) => {\n    const flagUrl = `https://disease.sh/assets/img/flags/${country.ISO2.toLowerCase()}.png`; // const flagUrl = `https://www.countryflags.io/${country.ISO2.toLowerCase()}/flat/64.png`\n    // const flagUrl = `https://flagcdn.com/256x192/${country.ISO2.toLowerCase()}.png`\n\n    const worldUrl = `https://freesvg.org/img/Globe-Icon-Umber.png`;\n    return (\n      /*#__PURE__*/\n      // <div className=\"country\">\n      //     <img className=\"flag\" key={country.slug} src={flagUrl} onError={(e)=>{ \n      //         if (e.target.src !== worldUrl) {\n      //             e.target.src=worldUrl;}\n      //         }}/>\n      //     <h5 className=\"countryName\">{country.country}</h5>\n      //     <button className=\"delete\" onClick={() => {collection.splice(index, 1)}}> Delete </button>\n      // </div>\n      React.createElement(\"div\", {\n        className: \"country\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Viz, {\n        countryName: countryName,\n        totalCases: totalCases(),\n        dailyData: parseData(dailyData, array),\n        caseType: caseType,\n        slug: slug,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 33\n        }\n      }))\n    );\n  }))));\n};\n\nexport default CountryDropdown;","map":{"version":3,"sources":["/Users/Ginny 1/SSUI-Final/src/components/CountryDropdown.js"],"names":["React","Viz","useSelector","useDispatch","NavLink","Delete","CountryDropdown","props","countries","state","collection","dispatch","countryName","Object","keys","country","totalCases","dailyData","length","Confirmed","array","parseData","data","forEach","day","index","push","dayCount","date","Date","total","active","Active","recovered","Recovered","deaths","Deaths","fetchCountry","event","slug","ISO2","target","value","split","fetchData","requestOptions","method","redirect","response","fetch","json","parsedData","filter","type","payload","invalid","sort","a","b","Country","map","Slug","flagUrl","toLowerCase","worldUrl","caseType"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Viz from '../d3/Viz'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { NavLink } from 'react-router-dom';\nimport \"./CountryDropdown.css\";\nimport Delete from \"../img/delete.png\";\n\nconst CountryDropdown = (props) => {\n\n    const countries = useSelector(state => state.countries)\n    const collection = useSelector(state => state.collection)\n    const dispatch = useDispatch()\n    const countryName = Object.keys(country)[0]\n\n    const totalCases = () => dailyData.length === 0 ? 0 : dailyData[dailyData.length-1].Confirmed\n    \n        const array = []\n        const parseData = (data, array) => {\n            data.forEach( (day, index) => {\n                array.push({\n                    dayCount: index + 1,\n                    date: new Date(day.Date),\n                    total: day.Confirmed, \n                    active: day.Active, \n                    recovered: day.Recovered, \n                    deaths: day.Deaths\n                })\n            })\n            return array\n        }\n\n\n// Fetch specific country covid data based on user's choice in the select option\n    const fetchCountry = (event) => {\n        const [slug, country, ISO2] = event.target.value.split(\",\") \n\n        async function fetchData() {\n\n            const requestOptions = {\n                method: 'GET',\n                redirect: 'follow'\n            };\n            \n            const response = await fetch(`https://api.covid19api.com/total/country/` + slug, requestOptions)\n\n            const data = await response.json()\n            const parsedData = data.filter(day => day.Confirmed > 0)\n\n            dispatch( { type: 'addCountryData', payload: { [country]: parsedData }} )\n            dispatch( { type: 'addCountryToCollection', payload: {slug, country, ISO2}} )\n        }\n        fetchData();\n    }\n\n    const invalid = () => collection.length === 0\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-sm-12 col-md-6 col-lg-3\">\n\n                <h6> Choose the country you want to display</h6>\n\n                <select onChange={event => fetchCountry(event)}>\n                \n                    <option placeholder=\"Countries\"> Countries </option>\n                    {countries.sort((a, b) => (a.Country > b.Country) ? 1 : -1).map(country => (\n                        <option\n                            id={country.Slug}\n                            key={country.Slug}\n                            value={[country.Slug, country.Country, country.ISO2]}\n                        >\n                        {country.Country}\n                        </option> \n                    ))}\n                </select>\n\n                <NavLink to='/collection'>\n                    <button className=\"dark\" disabled={invalid()}>View plots side by side</button>\n                </NavLink>\n\n                <button className=\"dark\"disabled={invalid()}> View overlay plot </button>\n            </div>\n\n            <div className=\"col-sm-12 col-md-6 col-lg-9\">\n                <div className=\"countries\">\n                {collection.map( (country, index) => {\n                    const flagUrl = `https://disease.sh/assets/img/flags/${country.ISO2.toLowerCase()}.png`\n                    // const flagUrl = `https://www.countryflags.io/${country.ISO2.toLowerCase()}/flat/64.png`\n                    // const flagUrl = `https://flagcdn.com/256x192/${country.ISO2.toLowerCase()}.png`\n                    const worldUrl = `https://freesvg.org/img/Globe-Icon-Umber.png`\n\n                    return (\n\n                            // <div className=\"country\">\n                            //     <img className=\"flag\" key={country.slug} src={flagUrl} onError={(e)=>{ \n                            //         if (e.target.src !== worldUrl) {\n                            //             e.target.src=worldUrl;}\n                            //         }}/>\n                            //     <h5 className=\"countryName\">{country.country}</h5>\n                            //     <button className=\"delete\" onClick={() => {collection.splice(index, 1)}}> Delete </button>\n                            // </div>\n                            <div className=\"country\">\n                                <Viz countryName={countryName} totalCases={totalCases()} dailyData={parseData(dailyData, array)} caseType={caseType} slug={slug}/>\n                            </div>\n                    )\n                })}\n                </div>\n            </div>\n\n            </div>\n\n    )\n}\n\nexport default CountryDropdown\n\n\n"]},"metadata":{},"sourceType":"module"}