{"ast":null,"code":"import { select, geoNaturalEarth1, scaleSqrt, max, format, selectAll } from 'd3';\nimport { sizeLegend } from './SizeLegend';\nimport { color } from './Color';\nimport DrawMap from './DrawMap';\n\nconst DisplayMapData = (caseType, caseTitle, data) => {\n  data.sort((a, b) => a[`${caseType}`] < b[`${caseType}`] ? 1 : -1); // resetting to blank map\n\n  selectAll(\"circle\").remove();\n  select(\"g.map-legend\").remove();\n  select(\"text.legend-title\").remove(); // add new caseType data to build new visualization\n\n  if (caseType !== \"reset\") {\n    const g = select(\".map-group\");\n    const projection = geoNaturalEarth1();\n\n    const radiusValue = d => d[`${caseType}`];\n\n    const sizeScale = scaleSqrt().domain([0, max(data, d => d[`${caseType}`], radiusValue)]).range([0, 20]);\n    g.selectAll('circle').data(data).enter().append('circle').attr('class', 'country-circle') // setting x and y coordiantes by translating country coordinate data to pixels\n    .attr(\"transform\", function (d) {\n      return \"translate(\" + projection([d.countryInfo.long, d.countryInfo.lat]) + \")\";\n    }).attr(\"r\", d => sizeScale(radiusValue(d))).attr(\"fill\", color(caseType)).append(\"title\").text(d => d.country + \" \" + caseTitle + \": \" + format(',')(d[`${caseType}`])); // adding size legend\n\n    const numberFormat = format(',');\n    const legend = g.append('g').attr('transform', `translate(65, 125)`).attr('class', 'map-legend').call(sizeLegend, {\n      sizeScale,\n      spacing: 45,\n      textOffset: 10,\n      numTicks: 5,\n      tickFormat: numberFormat\n    }); // adding map title on side of legend\n\n    const title = g.append('text').attr('class', 'legend-title').text(caseTitle).attr('transform', 'rotate(270)').attr('x', -245).attr('y', 45); // color-coding all circles based on caseType from user input\n\n    g.selectAll(\"circle\").attr(\"fill\", color(caseType)); // raises the current circle when moused over\n    // selectAll(\"circle\").on(\"mouseover\", function(){\n    //     select(this).raise()\n    // });\n  } else {\n    // remove entire svg and re-draw map to reset to original zoom level\n    select(\"svg\").remove();\n    DrawMap();\n  }\n};\n\nexport default DisplayMapData;","map":{"version":3,"sources":["/Users/Ginny 1/covid19_world_tracker_frontend/src/d3/DisplayMapData.js"],"names":["select","geoNaturalEarth1","scaleSqrt","max","format","selectAll","sizeLegend","color","DrawMap","DisplayMapData","caseType","caseTitle","data","sort","a","b","remove","g","projection","radiusValue","d","sizeScale","domain","range","enter","append","attr","countryInfo","long","lat","text","country","numberFormat","legend","call","spacing","textOffset","numTicks","tickFormat","title"],"mappings":"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","sourcesContent":["import { select, geoNaturalEarth1, scaleSqrt, max, format, selectAll } from 'd3'\nimport { sizeLegend } from './SizeLegend'\nimport { color } from './Color'\nimport DrawMap from './DrawMap'\n\nconst DisplayMapData = (caseType, caseTitle, data) => {\n    data.sort((a, b) => a[`${caseType}`] < b[`${caseType}`] ? 1 : -1)\n\n    // resetting to blank map\n    selectAll(\"circle\").remove()\n    select(\"g.map-legend\").remove()\n    select(\"text.legend-title\").remove()\n\n    // add new caseType data to build new visualization\n    if (caseType !== \"reset\") {    \n\n        const g = select(\".map-group\")\n\n        const projection = geoNaturalEarth1();\n        const radiusValue = d => d[`${caseType}`];\n\n        const sizeScale = scaleSqrt()\n            .domain([0, max(data, d => d[`${caseType}`], radiusValue)])\n            .range([0, 20]);\n\n        g.selectAll('circle').data(data)\n        .enter().append('circle')\n            .attr('class', 'country-circle')\n            // setting x and y coordiantes by translating country coordinate data to pixels\n            .attr(\"transform\", function(d) { return \"translate(\" + projection([d.countryInfo.long, d.countryInfo.lat]) + \")\"; })\n            .attr(\"r\", d => sizeScale(radiusValue(d)))\n            .attr(\"fill\", color(caseType))\n        .append(\"title\")\n            .text(d => d.country + \" \" + caseTitle + \": \"\n            + format(',')(d[`${caseType}`]))\n\n\n\n        // adding size legend\n        const numberFormat = format(',');\n\n        const legend = g.append('g')\n            .attr('transform', `translate(65, 125)`)\n            .attr('class', 'map-legend')\n            .call(sizeLegend, {\n                sizeScale,\n                spacing: 45,\n                textOffset: 10,\n                numTicks: 5,\n                tickFormat: numberFormat \n            })\n\n        // adding map title on side of legend\n        const title = g.append('text')\n            .attr('class', 'legend-title')\n            .text(caseTitle)\n            .attr('transform', 'rotate(270)')\n            .attr('x', -245)\n            .attr('y', 45);\n\n        // color-coding all circles based on caseType from user input\n        g.selectAll(\"circle\")\n            .attr(\"fill\", color(caseType));\n\n        // raises the current circle when moused over\n        // selectAll(\"circle\").on(\"mouseover\", function(){\n        //     select(this).raise()\n        // });\n    } else {\n        // remove entire svg and re-draw map to reset to original zoom level\n        select(\"svg\").remove()\n        DrawMap()\n    }\n}\n\nexport default DisplayMapData"]},"metadata":{},"sourceType":"module"}