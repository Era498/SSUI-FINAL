{"ast":null,"code":"var _jsxFileName = \"/Users/Ginny 1/SSUI-Final/src/containers/Show.js\";\n// need to add loader logic\nimport data from '../components/data/data.json';\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Province from '../components/Province';\nimport State from '../components/State';\nimport Country from '../components/Country';\nimport { Card } from 'react-bootstrap';\nimport { Col } from 'react-bootstrap';\nimport { Row } from 'react-bootstrap';\nimport { selectAll } from 'd3';\n\nconst Show = props => {\n  // const cache = useSelector(state => state.cache)\n  // const collection = useSelector(state => state.collection)\n  const name = props.location.slug;\n  let nameCap = name.charAt(0).toUpperCase() + name.slice(1);\n  const countryData = useSelector(state => state.countryData); // let index = 0;\n\n  console.log(countryData);\n  let index = countryData.findIndex(obj => Object.keys(obj)[0] === nameCap);\n  console.log(index); // countryData.map((country,idx) => {\n  //     console.log(Object.keys(country)[0]);\n  //     console.log(typeof(nameCap));\n  //     console.log(Object.keys(country)[0] === nameCap)\n  //     if (Object.keys(country)[0] === nameCap) {\n  //     console.log(\"right\")\n  //     index = idx;\n  // }})\n  // console.log(index);\n  // console.log(countryData);\n  // const name = props.location.slug;\n  // let nameCap = name.charAt(0).toUpperCase() + name.slice(1)\n  // console.log(Object.keys(countryData))\n  // const name = props.location.slug;\n  // let nameCap = name.charAt(0).toUpperCase() + name.slice(1)\n  // const country = {[nameCap] : cache[props.location.slug]}\n  // console.log(country);\n  // const provincesData = useSelector(state => state.provincesData)\n\n  const [caseType, setCaseType] = useState(\"\"); // const [provinces, setProvinces] = useState([])\n  // const [isLoading, setIsLoading] = useState(false);\n  // const dispatch = useDispatch()\n  // const url = \"https://api.covid19api.com/dayone/country/\" + props.location.slug\n  // useEffect( () => {\n  //     async function fetchData() {\n  //         if (cache[props.location.slug]) {\n  //             console.log(\"true - using cached data\")\n  //             dispatch({ type: 'addProvincesData', payload: cache[props.location.slug] })\n  //             const name = props.location.slug;\n  //             let nameCap = name.charAt(0).toUpperCase() + name.slice(1)\n  //             const country = {[nameCap] : cache[props.location.slug]}\n  //             const provinceArray = []\n  //             cache[props.location.slug].forEach(d => {\n  //                 if (!provinceArray.includes(d.Province) && d.Province !== \"\") {\n  //                     provinceArray.push(d.Province)\n  //                 } else if (!provinceArray.includes(\"\") && d.Province === \"\")\n  //                     provinceArray.push(\"\")\n  //             })\n  //             const sortedProvinces = provinceArray.sort((a,b) => a > b ? 1 : -1)\n  //             setProvinces(sortedProvinces)\n  //         } else if (props.location.slug === \"united-states\") {\n  //             dispatch({ type: 'cacheData', payload: {slug: props.location.slug, data} })\n  //             // fetch US data from 05/01/20 onwards and add to cache\n  //             var requestOptions = {\n  //                 method: 'GET',\n  //                 redirect: 'follow'\n  //             };\n  //             const url = \"https://api.covid19api.com/live/country/united-states/status/confirmed/date/2020-08-12T13:13:30Z\"\n  //             // const url = \"https://api.covid19api.com/live/country/united-states/status/confirmed/date/2020-05-01T13:13:30Z\"\n  //             const response = await fetch(url, requestOptions)\n  //             const fetchedData = await response.json()\n  //             dispatch({ type: 'addToCachedData', payload: fetchedData })\n  //             // dispatch({ type: 'addProvincesData', payload: cache[\"united-states\"] })\n  //             dispatch({ type: 'addProvincesData', payload: data.concat(fetchedData) })\n  // const provinceArray = []\n  // data.concat(fetchedData).forEach(d => {\n  //     if (!provinceArray.includes(d.Province) && d.Province !== \"\") {\n  //         provinceArray.push(d.Province)\n  //     } else if (!provinceArray.includes(\"\") && d.Province === \"\")\n  //         provinceArray.push(\"\")\n  // })\n  // const sortedProvinces = provinceArray.sort((a,b) => a > b ? 1 : -1)\n  // setProvinces(sortedProvinces)\n  //         } else {\n  //             var requestOptions = {\n  //                 method: 'GET',\n  //                 redirect: 'follow'\n  //             };\n  //             const response = await fetch(url, requestOptions)\n  //             const data = await response.json()\n  //             dispatch({ type: 'cacheData', payload: {slug: props.location.slug, data} })\n  //             dispatch({ type: 'addProvincesData', payload: data})\n  //             const provinceArray = []\n  //             data.forEach(d => {\n  //                 if (!provinceArray.includes(d.Province) && d.Province !== \"\") {\n  //                     provinceArray.push(d.Province)\n  //                 } else if (!provinceArray.includes(\"\") && d.Province === \"\")\n  //                     provinceArray.push(\"\")\n  //             })\n  //             setProvinces(provinceArray.sort((a,b) => a > b ? 1 : -1))\n  //         }\n  //     }\n  //     fetchData();\n  // }, []); \n  // console.log(cache)\n  // const name = props.location.slug;\n  // let nameCap = name.charAt(0).toUpperCase() + name.slice(1)\n  // const country = {[nameCap] : cache[props.location.slug]}\n  // console.log(country);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: \"12\",\n    sm: \"6\",\n    md: \"4\",\n    lg: \"3\",\n    xl: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: event => (setCaseType(event.target.value), selectAll(\"svg\").remove()),\n    className: \"cases block\",\n    value: \"total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 29\n    }\n  }, \"Total Cases\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: event => (setCaseType(event.target.value), selectAll(\"svg\").remove()),\n    className: \"deathsPerOneMillion block\",\n    value: \"deaths\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 29\n    }\n  }, \"Deaths\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: event => (setCaseType(event.target.value), selectAll(\"svg\").remove()),\n    className: \"activee block\",\n    value: \"active\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 29\n    }\n  }, \" Active Cases\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: event => (setCaseType(event.target.value), selectAll(\"svg\").remove()),\n    className: \"recovered block\",\n    value: \"recovered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 29\n    }\n  }, \"Recovered Cases\"))), /*#__PURE__*/React.createElement(Col, {\n    sm: \"12\",\n    md: \"9\",\n    lg: \"9\",\n    xl: \"9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Country, {\n    caseType: caseType,\n    country: countryData[index],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 29\n    }\n  }))))); // Logic if country is United States (because state data is broken down into cities)\n  // if (provinces.includes(\"Alabama\")) {\n  //         return (\n  //             <div>\n  //                 <Row >\n  //                     <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n  //                         <Card>\n  //                             <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n  //                             <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n  //                             <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n  //                             <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n  //                         </Card>\n  //                     </Col>\n  //                     {provinces.map((state, index) => { \n  //                             return (\n  //                                 <Col xs={12} sm={6} md={4} lg={3} key={index}>\n  //                                     <Card>\n  //                                         <State caseType={caseType} state={state} stateData={provincesData.filter(day => day.Province === state)} countryName={provincesData[0].Country}/>\n  //                                     </Card>\n  //                                 </Col>\n  //                             )\n  //                         })\n  //                     } \n  //                 </Row>\n  //             </div>\n  //         )\n  // Logic for countries that are not broken down into provinces (such as Mexico)\n  // } else if (provinces.length === 1) {\n  //     return (\n  //         <div>\n  //             <Row >\n  //                 <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n  //                     <Card>\n  //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n  //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n  //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n  //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n  //                     </Card>\n  //                 </Col>\n  //                 <Col sm=\"12\" md=\"9\" lg=\"9\" xl=\"9\">\n  //                     <Card>\n  //                         <Province caseType={caseType} province={provincesData[0].Country} provinceData={provincesData}/> \n  //                     </Card>\n  //                 </Col>\n  //             </Row>\n  //         </div>\n  //     )\n  // Logic for all other countries that have data broken down by province (such as China, or United Kingdom)\n  // } else {\n  //     return (\n  //         <div>\n  //             <Row >\n  //                 <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n  //                     <Card>\n  //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n  //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n  //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n  //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n  //                     </Card>\n  //                 </Col>\n  //                 {provinces.map((province, index) => { \n  //                         return (\n  //                             <Col xs={12} sm={6} md={4} lg={3} key={index}>\n  //                                 <Card>\n  //                                     <Province caseType={caseType} province={province} provinceData={provincesData.filter(day => day.Province === province)}/> \n  //                                 </Card>\n  //                             </Col>\n  //                         )\n  //                     })\n  //                 } \n  //             </Row>\n  //         </div>\n  //     )\n  // }\n};\n\nexport default Show;","map":{"version":3,"sources":["/Users/Ginny 1/SSUI-Final/src/containers/Show.js"],"names":["data","React","useState","useEffect","useSelector","useDispatch","Province","State","Country","Card","Col","Row","selectAll","Show","props","name","location","slug","nameCap","charAt","toUpperCase","slice","countryData","state","console","log","index","findIndex","obj","Object","keys","caseType","setCaseType","event","target","value","remove"],"mappings":"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","sourcesContent":["// need to add loader logic\nimport data from '../components/data/data.json'\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Province from '../components/Province'\nimport State from '../components/State'\nimport Country from '../components/Country'\n\nimport { Card } from 'react-bootstrap'\nimport { Col } from 'react-bootstrap'\nimport { Row } from 'react-bootstrap'\n\nimport { selectAll } from 'd3'\n\n\n\nconst Show = (props) => {\n    // const cache = useSelector(state => state.cache)\n    // const collection = useSelector(state => state.collection)\n    const name = props.location.slug;\n    let nameCap = name.charAt(0).toUpperCase() + name.slice(1)\n    const countryData = useSelector(state => state.countryData)\n    // let index = 0;\n    console.log(countryData)\n\n    let index = countryData.findIndex(obj => Object.keys(obj)[0] === nameCap);\n    console.log(index);\n    // countryData.map((country,idx) => {\n    //     console.log(Object.keys(country)[0]);\n        \n    //     console.log(typeof(nameCap));\n    //     console.log(Object.keys(country)[0] === nameCap)\n    //     if (Object.keys(country)[0] === nameCap) {\n    //     console.log(\"right\")\n    //     index = idx;\n    // }})\n    // console.log(index);\n    // console.log(countryData);\n    // const name = props.location.slug;\n    // let nameCap = name.charAt(0).toUpperCase() + name.slice(1)\n    // console.log(Object.keys(countryData))\n    // const name = props.location.slug;\n    // let nameCap = name.charAt(0).toUpperCase() + name.slice(1)\n    // const country = {[nameCap] : cache[props.location.slug]}\n    // console.log(country);\n    // const provincesData = useSelector(state => state.provincesData)\n    const [caseType, setCaseType] = useState(\"\");\n    // const [provinces, setProvinces] = useState([])\n    // const [isLoading, setIsLoading] = useState(false);\n    // const dispatch = useDispatch()\n    // const url = \"https://api.covid19api.com/dayone/country/\" + props.location.slug\n\n\n    // useEffect( () => {\n    //     async function fetchData() {\n\n    //         if (cache[props.location.slug]) {\n    //             console.log(\"true - using cached data\")\n    //             dispatch({ type: 'addProvincesData', payload: cache[props.location.slug] })\n                \n    //             const name = props.location.slug;\n    //             let nameCap = name.charAt(0).toUpperCase() + name.slice(1)\n    //             const country = {[nameCap] : cache[props.location.slug]}\n\n    //             const provinceArray = []\n    //             cache[props.location.slug].forEach(d => {\n    //                 if (!provinceArray.includes(d.Province) && d.Province !== \"\") {\n    //                     provinceArray.push(d.Province)\n    //                 } else if (!provinceArray.includes(\"\") && d.Province === \"\")\n    //                     provinceArray.push(\"\")\n    //             })\n    //             const sortedProvinces = provinceArray.sort((a,b) => a > b ? 1 : -1)\n    //             setProvinces(sortedProvinces)\n\n\n\n    //         } else if (props.location.slug === \"united-states\") {\n    //             dispatch({ type: 'cacheData', payload: {slug: props.location.slug, data} })\n\n    //             // fetch US data from 05/01/20 onwards and add to cache\n    //             var requestOptions = {\n    //                 method: 'GET',\n    //                 redirect: 'follow'\n    //             };\n\n    //             const url = \"https://api.covid19api.com/live/country/united-states/status/confirmed/date/2020-08-12T13:13:30Z\"\n    //             // const url = \"https://api.covid19api.com/live/country/united-states/status/confirmed/date/2020-05-01T13:13:30Z\"\n    //             const response = await fetch(url, requestOptions)\n    //             const fetchedData = await response.json()\n    //             dispatch({ type: 'addToCachedData', payload: fetchedData })\n    //             // dispatch({ type: 'addProvincesData', payload: cache[\"united-states\"] })\n    //             dispatch({ type: 'addProvincesData', payload: data.concat(fetchedData) })\n\n\n\n                // const provinceArray = []\n                // data.concat(fetchedData).forEach(d => {\n                //     if (!provinceArray.includes(d.Province) && d.Province !== \"\") {\n                //         provinceArray.push(d.Province)\n                //     } else if (!provinceArray.includes(\"\") && d.Province === \"\")\n                //         provinceArray.push(\"\")\n                // })\n                // const sortedProvinces = provinceArray.sort((a,b) => a > b ? 1 : -1)\n                // setProvinces(sortedProvinces)\n\n\n\n\n    //         } else {\n\n    //             var requestOptions = {\n    //                 method: 'GET',\n    //                 redirect: 'follow'\n    //             };\n\n    //             const response = await fetch(url, requestOptions)\n    //             const data = await response.json()\n    //             dispatch({ type: 'cacheData', payload: {slug: props.location.slug, data} })\n    //             dispatch({ type: 'addProvincesData', payload: data})\n\n    //             const provinceArray = []\n    //             data.forEach(d => {\n    //                 if (!provinceArray.includes(d.Province) && d.Province !== \"\") {\n    //                     provinceArray.push(d.Province)\n    //                 } else if (!provinceArray.includes(\"\") && d.Province === \"\")\n    //                     provinceArray.push(\"\")\n    //             })\n                \n    //             setProvinces(provinceArray.sort((a,b) => a > b ? 1 : -1))\n    //         }\n    //     }\n    //     fetchData();\n    // }, []); \n\n\n    // console.log(cache)\n    // const name = props.location.slug;\n    // let nameCap = name.charAt(0).toUpperCase() + name.slice(1)\n    // const country = {[nameCap] : cache[props.location.slug]}\n    // console.log(country);\n\n        return (\n            <div>\n                <Row >\n                    <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n                        <Card>\n                            <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n                            <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n                            <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n                            <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n                        </Card>\n                    </Col>\n\n                    <Col sm=\"12\" md=\"9\" lg=\"9\" xl=\"9\">\n                        <Card>\n                            <Country caseType={caseType} country={countryData[index]}/>\n                            {/* <Province caseType={caseType} province={provincesData[0].Country} provinceData={provincesData}/>  */}\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        )\n\n            // Logic if country is United States (because state data is broken down into cities)\n        // if (provinces.includes(\"Alabama\")) {\n        //         return (\n        //             <div>\n        //                 <Row >\n        //                     <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n        //                         <Card>\n        //                             <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n        //                             <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n        //                             <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n        //                             <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n        //                         </Card>\n        //                     </Col>\n\n        //                     {provinces.map((state, index) => { \n\n        //                             return (\n        //                                 <Col xs={12} sm={6} md={4} lg={3} key={index}>\n        //                                     <Card>\n        //                                         <State caseType={caseType} state={state} stateData={provincesData.filter(day => day.Province === state)} countryName={provincesData[0].Country}/>\n        //                                     </Card>\n        //                                 </Col>\n        //                             )\n        //                         })\n        //                     } \n        //                 </Row>\n        //             </div>\n        //         )\n\n            // Logic for countries that are not broken down into provinces (such as Mexico)\n            // } else if (provinces.length === 1) {\n            //     return (\n            //         <div>\n            //             <Row >\n            //                 <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n            //                     <Card>\n            //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n            //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n            //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n            //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n            //                     </Card>\n            //                 </Col>\n\n            //                 <Col sm=\"12\" md=\"9\" lg=\"9\" xl=\"9\">\n            //                     <Card>\n            //                         <Province caseType={caseType} province={provincesData[0].Country} provinceData={provincesData}/> \n            //                     </Card>\n            //                 </Col>\n            //             </Row>\n            //         </div>\n            //     )\n\n            // Logic for all other countries that have data broken down by province (such as China, or United Kingdom)\n            // } else {\n            //     return (\n            //         <div>\n            //             <Row >\n            //                 <Col xs=\"12\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"3\">\n            //                     <Card>\n            //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"cases block\" value=\"total\">Total Cases</button>\n            //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"deathsPerOneMillion block\" value=\"deaths\">Deaths</button>\n            //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"activee block\" value=\"active\"> Active Cases</button>\n            //                         <button onClick={event => (setCaseType(event.target.value), selectAll(\"svg\").remove())} className=\"recovered block\" value=\"recovered\">Recovered Cases</button>\n            //                     </Card>\n            //                 </Col>\n\n            //                 {provinces.map((province, index) => { \n            //                         return (\n            //                             <Col xs={12} sm={6} md={4} lg={3} key={index}>\n            //                                 <Card>\n            //                                     <Province caseType={caseType} province={province} provinceData={provincesData.filter(day => day.Province === province)}/> \n            //                                 </Card>\n            //                             </Col>\n            //                         )\n            //                     })\n            //                 } \n            //             </Row>\n            //         </div>\n            //     )\n            // }\n\n}\n\nexport default Show"]},"metadata":{},"sourceType":"module"}